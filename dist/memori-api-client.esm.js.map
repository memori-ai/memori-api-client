{"version":3,"file":"memori-api-client.esm.js","sources":["../src/helpers/getApiUrl.ts","../src/apiFetcher.ts","../src/backend/memori.ts","../src/backend/user.ts","../src/backend/integration.ts","../src/backend/asset.ts","../src/backend/invitation.ts","../src/backend.ts","../src/engine/correlationPairs.ts","../src/engine/dialog.ts","../src/engine/importExport.ts","../src/engine/intents.ts","../src/engine/localizationKeys.ts","../src/engine/media.ts","../src/engine/memori.ts","../src/engine/memories.ts","../src/engine/nlp.ts","../src/engine/people.ts","../src/engine/promptedQuestions.ts","../src/engine/search.ts","../src/engine/session.ts","../src/engine/stats.ts","../src/engine/unansweredQuestions.ts","../src/engine/webhooks.ts","../src/engine.ts","../src/constants.ts","../src/speech.ts","../src/helpers/asset.ts","../src/index.ts"],"sourcesContent":["export const getApiUrl = (hostname?: string) =>\n  hostname\n    ? new URL(\n        hostname.startsWith('http') ? hostname : `https://${hostname}`\n      ).origin.replace('http://', 'https://')\n    : 'https://backend.memori.ai';\n","import { default as fetch } from 'cross-fetch';\n\nexport const fetcher = (\n  path: string,\n  opts: {\n    apiUrl: string;\n    method?: string;\n    body?: object;\n    headers?: object;\n  }\n) =>\n  fetch(`${opts.apiUrl}${path}`, {\n    ...opts,\n    body: opts?.body ? JSON.stringify(opts.body) : undefined,\n    mode: 'cors',\n    credentials: 'include',\n    headers: {\n      // \"Access-Control-Allow-Origin\": \"*\",\n      'Content-Type': 'application/json',\n      ...opts?.headers,\n    },\n  }).then(res => res.json());\n\nexport const devFetcher = (data: any) => Promise.resolve(data);\n\nexport const apiFetcher =\n  process.env.CI === 'true' || process.env.NODE_ENV === 'test'\n    ? devFetcher\n    : fetcher;\n","import { ResponseSpec, Memori, MemoriConfig } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\nexport default (apiUrl: string) => ({\n  /**\n   * Gets a list of all the public Memori objects for a specific Tenant.\n   * @param tenant - The name of the tenant\n   * @returns A list of Memori objects\n   */\n  getTenantPublicMemoriList: (tenant: string) =>\n    apiFetcher(`/TenantPublicMemori/${encodeURI(tenant)}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memori: Memori[];\n      }\n    >,\n\n  /**\n   * Gets a list of all the public Memori objects for a specific Tenant accessible from user session.\n   * @param authToken - The login token\n   * @returns A list of Memori objects\n   */\n  getPublicMemoriList: (authToken: string) =>\n    apiFetcher(`/PublicMemori/${authToken}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memori: Memori[];\n      }\n    >,\n\n  /**\n   * Gets a list of all Memori objects.\n   * @param authToken - The login token\n   * @returns A list of Memori objects\n   */\n  getAllMemori: (authToken: string) =>\n    apiFetcher(`/AllMemori/${authToken}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memori: Memori[];\n      }\n    >,\n\n  /**\n   * Gets a list of Memori objects for the currently logged in User.\n   * @param authToken - The login token\n   * @returns A list of Memori objects\n   */\n  getUserMemoriList: (authToken: string) =>\n    apiFetcher(`/Memori/${authToken}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memori: Memori[];\n      }\n    >,\n\n  /**\n   * Gets a list of Memori objects for the currently logged in User.\n   * @param authToken - The login token\n   * @returns A list of Memori objects\n   */\n  getSharedMemoriList: (authToken: string) =>\n    apiFetcher(`/SharedMemori/${authToken}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memori: Memori[];\n      }\n    >,\n\n  /**\n   * Gets a list of all the known Memori categories (or tags).\n   * @param {string} tenant - The name of the tenant\n   * @returns A list of Memori categories\n   */\n  getTenantCategories: (tenant: string) =>\n    apiFetcher(`/TenantMemoriCategories/${encodeURI(tenant)}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memoriCategories: string[];\n      }\n    >,\n\n  /**\n   * Gets a list of all the Memori Configuration objects.\n   * @param authToken - The login token\n   * @returns A list of Memori Configuration objects\n   */\n  getMemoriConfigs: (authToken: string) =>\n    apiFetcher(`/MemoriConfigs/${authToken}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memoriConfigs: MemoriConfig[];\n      }\n    >,\n\n  /**\n   * Register a new Memori object.\n   * @param authToken - The login token\n   * @param memori - The Memori object\n   * @returns The created Memori object\n   */\n  createMemori: (authToken: string, memori: Memori) =>\n    apiFetcher(`/Memori/${authToken}`, {\n      apiUrl,\n      body: memori,\n      method: 'POST',\n    }) as Promise<ResponseSpec & { memori: Memori }>,\n\n  /**\n   * Update an existing Memori object.\n   * @param authToken - The login token\n   * @param memori - The Memori object\n   * @returns The created Memori object\n   */\n  updateMemori: (authToken: string, memori: Memori) =>\n    apiFetcher(`/Memori/${authToken}/${memori.memoriID}`, {\n      apiUrl,\n      body: memori,\n      method: 'PATCH',\n    }) as Promise<ResponseSpec & { memori: Memori }>,\n\n  /**\n   * Deletes an existing Memori object.\n   * @param authToken - The login token\n   * @param memori - The Memori object\n   */\n  deleteMemori: (authToken: string, memori: Memori) =>\n    apiFetcher(`/Memori/${authToken}`, {\n      apiUrl,\n      body: memori,\n      method: 'DELETE',\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Gets the details of a Memori object of the currently logged in User.\n   * @param authToken - The login token\n   * @param memoriID - The ID of the Memori object\n   * @returns A Memori object\n   */\n  getMemoriById: (authToken: string, memoriID: string) =>\n    apiFetcher(`/Memori/${authToken}/${memoriID}`, {\n      apiUrl,\n    }) as Promise<ResponseSpec & { memori: Memori }>,\n\n  /**\n   * Gets the details of a Memori object of the currently logged in User.\n   * @param {string} tenantName - The Name of the Tenant\n   * @param {string} userID - The ID of the User object\n   * @param {string} memoriID - The ID of the Memori object\n   * @param {string?} authToken - The login token\n   * @returns A Memori object\n   */\n  getMemoriByUserAndId: (\n    tenantName: string,\n    userID: string,\n    memoriID: string,\n    authToken?: string\n  ) =>\n    apiFetcher(\n      `/MemoriById/${tenantName}/${userID}/${memoriID}${\n        authToken ? `/${authToken}` : ''\n      }`,\n      {\n        apiUrl,\n      }\n    ) as Promise<ResponseSpec & { memori: Memori }>,\n\n  /**\n   * Gets the details of a Memori object by name, owner and tenant\n   * @param {string} tenant - The name of the tenant\n   * @param {string} userName - The name of the user\n   * @param {string} memoriName - The name of the Memori object\n   * @param {string=} [authToken=''] - The token of the Memori object\n   */\n  getMemori: (\n    tenant: string,\n    userName: string,\n    memoriName: string,\n    authToken?: string\n  ) =>\n    apiFetcher(\n      `/Memori/${encodeURI(tenant)}/${encodeURI(userName)}/${encodeURI(\n        memoriName\n      )}/${authToken ?? ''}`,\n      {\n        apiUrl,\n      }\n    ) as Promise<ResponseSpec & { memori: Memori }>,\n\n  /**\n   * Gets the statistics for sessions opened in a specified interval for the specified Memori object.\n   * @param {string} authToken - The login token\n   * @param {string} memoriID - The ID of the Memori object\n   * @param {string=} dateFrom - The optional begin of the date interval, in UTC time, in the format yyyyMMddHHmmssfff\n   * @param {string=} dateTo - The optional end of the date interval, in UTC time, in the format yyyyMMddHHmmssfff\n   */\n  getMemoriSessions: (\n    authToken: string,\n    memoriID: string,\n    dateFrom?: string,\n    dateTo?: string\n  ) =>\n    apiFetcher(\n      `/MemoriSessions/${authToken}/${memoriID}${\n        dateFrom ? `/${dateFrom}` : ''\n      }${dateFrom && dateTo ? `/${dateTo}` : ''}`,\n      {\n        apiUrl,\n      }\n    ) as Promise<\n      ResponseSpec & {\n        totalSessions: number;\n        validSessions: number;\n      }\n    >,\n});\n","import { ResponseSpec, Tenant, User } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\nexport default (apiUrl: string) => ({\n  /**\n   * Registers a new user.\n   * @param user - The user object\n   * @returns The created user object\n   */\n  userSignIn: (user: User) =>\n    apiFetcher('/User', {\n      apiUrl,\n      body: user,\n      method: 'POST',\n    }) as Promise<ResponseSpec & { user: User }>,\n\n  /**\n   * Confirms the registration of a User and performs a Login.\n   * @param user - The user object\n   * @returns The created user object\n   */\n  userConfirmSignIn: (user: User) =>\n    apiFetcher('/UserConfirm', {\n      apiUrl,\n      body: user,\n      method: 'POST',\n    }) as Promise<ResponseSpec & { user: User; token?: string }>,\n\n  /**\n   * Tries a login with the specified credentials and returns a login token if successful.\n   * @param user - The user object\n   * @returns The logged in user object\n   */\n  userLogin: (user: User) =>\n    apiFetcher('/Login', {\n      apiUrl,\n      body: user,\n      method: 'POST',\n    }) as Promise<\n      ResponseSpec & { user: User; token?: string; flowID?: string }\n    >,\n\n  /**\n   * Logs out the user.\n   * @param authToken - The login token\n   */\n  userLogout: (authToken: string) =>\n    apiFetcher(`/Logout/${authToken}`, {\n      apiUrl,\n      method: 'POST',\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Gets the details of a User object.\n   * @param authToken - The login token\n   * @param userID - The user ID\n   * @returns The user object\n   */\n  getUser: (authToken: string, userID: string) =>\n    apiFetcher(`/User/${authToken}/${userID}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        user: User;\n      }\n    >,\n\n  /**\n   * Gets a list of all the existing User objects.\n   * @param authToken - The login token\n   * @returns A list of User objects\n   */\n  getUsersList: (authToken: string) =>\n    apiFetcher(`/Users/${authToken}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        users: User[];\n      }\n    >,\n\n  /**\n   * Deletes the currently logged in User.\n   * @param {string} authToken - The login token\n   * @param {string} userID: The User ID\n   */\n  deleteUser: (authToken: string, userID: string) =>\n    apiFetcher(`/User/${authToken}/${userID}`, {\n      apiUrl,\n      method: 'DELETE',\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Updates the details of a User object.\n   * @param authToken - The login token\n   * @param userID - The user ID\n   * @returns The user object\n   */\n  updateUser: (authToken: string, userID: string, user: User) =>\n    apiFetcher(`/User/${authToken}/${userID}`, {\n      apiUrl,\n      method: 'PATCH',\n      body: user,\n    }) as Promise<\n      ResponseSpec & {\n        user: User;\n      }\n    >,\n\n  /**\n   * Resets a User's password.\n   * If found, the User receives a verification code via e-mail.\n   * The code must be sent via the ResetConfirm API, passing the same User object\n   * sent to this API with the addition of the verification code and the new password.\n   * @param {User} user - The user object\n   */\n  resetPassword: (user: User) =>\n    apiFetcher(`/ResetPassword`, {\n      apiUrl,\n      body: user,\n      method: 'POST',\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Confirms the password reset of a User and performs a Login\n   * @param {User} user - The user object\n   */\n  resetConfirm: (user: User) =>\n    apiFetcher(`/ResetConfirm`, {\n      apiUrl,\n      body: user,\n      method: 'POST',\n    }) as Promise<\n      ResponseSpec & {\n        user: User;\n        token?: string;\n        flowID?: string;\n      }\n    >,\n\n  /**\n   * Recovers a User's name and sends it to their configured e-mail.\n   * @param {User} user - The user object\n   */\n  recoverUsername: (user: User) =>\n    apiFetcher(`/RecoverUsername`, {\n      apiUrl,\n      body: user,\n      method: 'POST',\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Gets the details of a Tenant object.\n   * @param tenantName - The name of the tenant\n   */\n  getTenantConfig: (tenantName: string) =>\n    apiFetcher(`/Tenant/${tenantName}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        tenant: Tenant;\n      }\n    >,\n\n  /**\n   * Re-sends the verification code to confirm a pending User registration.\n   * @param {User} user - The user object\n   */\n  resendVerificationCode: (user: Partial<User>) =>\n    apiFetcher(`/ResendVerificationCode`, {\n      apiUrl,\n      body: user,\n      method: 'POST',\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Registers a new user.\n   * @param {User} user - The user object\n   */\n  createUser: (authToken: string, user: Partial<User>) =>\n    apiFetcher(`/User/${authToken}`, {\n      apiUrl,\n      body: user,\n      method: 'POST',\n    }) as Promise<ResponseSpec & { user: User }>,\n});\n","import { ResponseSpec, Integration } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\nexport default (apiUrl: string) => ({\n  /**\n   * Gets a list of integration objects for a specified Memori object.\n   * @param memoriID - The id of the Memori object\n   * @param authToken - The login token\n   * @returns A list of Integration objects\n   */\n  getMemoriIntegrationsList: (authToken: string, memoriID: string) =>\n    apiFetcher(`/Integrations/${authToken}/${memoriID}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        integrations: Integration[];\n      }\n    >,\n\n  /**\n   * Gets a list of integration objects.\n   * @param authToken - The login token\n   * @returns A list of Integration objects\n   */\n  getAllIntegrationsList: (authToken: string) =>\n    apiFetcher(`/AllIntegrations/${authToken}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        integrations: Integration[];\n      }\n    >,\n\n  /**\n   * Gets the detail of an integration object of the currently logged in User.\n   * @param authToken - The login token\n   * @param integrationID - The ID of the integration object\n   * @returns The Integration object\n   */\n  getIntegration: (authToken: string, integrationID: string) =>\n    apiFetcher(`/Integration/${authToken}/${integrationID}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        integration: Integration;\n      }\n    >,\n\n  /**\n   * Delete an exsisting integration object.\n   * @param authToken - The login token\n   * @param integrationID - The ID of the integration object\n   */\n  deleteIntegration: (authToken: string, integrationID: string) =>\n    apiFetcher(`/Integration/${authToken}/${integrationID}`, {\n      apiUrl,\n      method: 'DELETE',\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Register a new integration object.\n   * @param authToken - The login token\n   * @param integration - The Integration object\n   * @returns The Integration object\n   */\n  createIntegration: (authToken: string, integration: Integration) =>\n    apiFetcher(`/Integration/${authToken}`, {\n      apiUrl,\n      method: 'POST',\n      body: integration,\n    }) as Promise<\n      ResponseSpec & {\n        integration: Integration;\n      }\n    >,\n\n  /**\n   * Updates the integration object.\n   * @param authToken - The login token\n   * @param integrationID - The id of the Integration object\n   * @param integration - The Integration object\n   * @returns The Integration object\n   */\n  updateIntegration: (\n    authToken: string,\n    integrationID: string,\n    integration: Integration\n  ) =>\n    apiFetcher(`/Integration/${authToken}/${integrationID}`, {\n      apiUrl,\n      method: 'PATCH',\n      body: integration,\n    }) as Promise<\n      ResponseSpec & {\n        integration: Integration;\n      }\n    >,\n});\n","import { ResponseSpec, Asset } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\nexport default (apiUrl: string) => ({\n  /**\n   * URL to upload a file creating a new Asset object to access it.\n   * @param {string} authToken - The login token\n   * @param {string} memoriID - The memori ID\n   * @param {string=} memoryID - The memory ID\n   * @returns The URL to upload a file\n   */\n  getUploadAssetURL: (authToken: string, memoriID: string, memoryID?: string) =>\n    `${apiUrl}/Asset/${authToken}/${memoriID}${memoryID ? `/${memoryID}` : ''}`,\n\n  /**\n   * Uploads a file and creates a new Asset object to access it.\n   * @param {string} authToken - The login token\n   * @param {string} memoriID - The memori ID\n   * @param {string=} memoryID - The memory ID\n   * @returns Response of an Upload Asset request.\n   */\n  uploadAsset: async (\n    fileName: string,\n    fileUrl: string,\n    authToken: string,\n    memoriID: string,\n    memoryID?: string\n  ) => {\n    const data = new FormData();\n    const file = await fetch(fileUrl);\n    const fileBlob = await file.blob();\n\n    data.append(fileName, fileBlob, fileName);\n\n    const upload = await fetch(\n      `${apiUrl}/Asset/${authToken}/${memoriID}${\n        memoryID ? `/${memoryID}` : ''\n      }`,\n      {\n        method: 'POST',\n        body: data,\n      }\n    );\n    return (await upload.json()) as Promise<\n      ResponseSpec & {\n        asset: Asset;\n      }\n    >;\n  },\n\n  /**\n   * Downloads a file from an Asset object\n   * @param {string} fileName - The file name\n   * @param {string} sessionID - The session ID\n   * @returns The asset file\n   */\n  getAsset: (fileName: string, sessionID: string) =>\n    apiFetcher(`/Asset/${fileName}/${sessionID}`, {\n      apiUrl,\n      method: 'GET',\n    }),\n\n  /**\n   * Updates an Asset object\n   * @param {string} authToken - The login token\n   * @param {string} assetURL - The asset URL\n   * @returns The updated asset object\n   */\n  updateAsset: (authToken: string, assetURL: string, asset: Asset) =>\n    apiFetcher(`/Asset/${authToken}/${assetURL.split('/').reverse()[0]}`, {\n      apiUrl,\n      method: 'PATCH',\n      body: asset,\n    }) as Promise<ResponseSpec & { asset: Asset }>,\n\n  /**\n   * Deletes an Asset object\n   * @param {string} authToken - The login token\n   * @param {string} assetURL - The asset URL\n   */\n  deleteAsset: (authToken: string, assetURL: string) =>\n    apiFetcher(`/Asset/${authToken}/${assetURL.split('/').reverse()[0]}`, {\n      apiUrl,\n      method: 'DELETE',\n    }) as Promise<ResponseSpec>,\n});\n","import { ResponseSpec, Invitation } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\nexport default (apiUrl: string) => ({\n  /**\n   * Gets a list of invitations sent by the currently logged in User.\n   * @param {string} authToken - The login token\n   * @returns The list of Invitation objects.\n   */\n  getSentInvitations: (authToken: string) =>\n    apiFetcher(`/SentInvitations/${authToken}`, {\n      apiUrl,\n    }) as Promise<ResponseSpec & { invitations: Invitation[] }>,\n\n  /**\n   * Gets a list of invitations received by the currently logged in User.\n   * @param {string} authToken - The login token\n   * @returns The list of Invitation objects.\n   */\n  getReceivedInvitations: (authToken: string) =>\n    apiFetcher(`/ReceivedInvitations/${authToken}`, {\n      apiUrl,\n    }) as Promise<ResponseSpec & { invitations: Invitation[] }>,\n\n  /**\n   * Gets a list of all invitation objects\n   * @param {string} authToken - The login token\n   * @returns The list of Invitation objects.\n   */\n  getAllInvitations: (authToken: string) =>\n    apiFetcher(`/AllInvitations/${authToken}`, {\n      apiUrl,\n    }) as Promise<ResponseSpec & { invitations: Invitation[] }>,\n\n  /**\n   * Gets the details of an Invitation object of the currently logged in User.\n   * @param {string} authToken - The login token\n   * @param {string} invitationId - The ID of the Invitation object\n   * @returns The Invitation object.\n   */\n  getInvitation: (authToken: string, invitationId: string) =>\n    apiFetcher(`/Invitation/${authToken}/${invitationId}`, {\n      apiUrl,\n    }) as Promise<ResponseSpec & { invitation: Invitation }>,\n\n  /**\n   * Updates an existing Invitation object sent by the currently logged in User.\n   * @param {string} authToken - The login token\n   * @param {Invitation} invitation - The Invitation object\n   * @returns The Invitation object.\n   */\n  updateInvitation: (\n    authToken: string,\n    invitation: Partial<Omit<Invitation, 'invitationID'>> & {\n      invitationID: string;\n    }\n  ) =>\n    apiFetcher(`/Invitation/${authToken}/${invitation.invitationID}`, {\n      apiUrl,\n      method: 'PATCH',\n      body: invitation,\n    }) as Promise<ResponseSpec & { invitation: Invitation }>,\n\n  /**\n   * Deletes an existing Invitation object.\n   * @param {string} authToken - The login token\n   * @param {string} invitationId - The ID of the Invitation object\n   * @returns The Invitation object.\n   */\n  deleteInvitation: (authToken: string, invitationId: string) =>\n    apiFetcher(`/Invitation/${authToken}/${invitationId}`, {\n      apiUrl,\n      method: 'DELETE',\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Accepts an Invitation object.\n   * @param {string} authToken - The login token\n   * @param {string} invitationId - The ID of the Invitation object\n   * @returns The Invitation object.\n   */\n  acceptInvitation: (authToken: string, invitationId: string) =>\n    apiFetcher(`/AcceptInvitation/${authToken}/${invitationId}`, {\n      apiUrl,\n      method: 'POST',\n    }) as Promise<ResponseSpec & { invitation: Invitation }>,\n\n  /**\n   * Rejects an Invitation object.\n   * @param {string} authToken - The login token\n   * @param {string} invitationId - The ID of the Invitation object\n   * @returns The Invitation object.\n   */\n  rejectInvitation: (authToken: string, invitationId: string) =>\n    apiFetcher(`/RejectInvitation/${authToken}/${invitationId}`, {\n      apiUrl,\n      method: 'POST',\n    }) as Promise<ResponseSpec & { invitation: Invitation }>,\n\n  /**\n   * Send a new Invitation object\n   * @param {string} authToken - The login token\n   * @param {Invitation} invitation - The Invitation object\n   * @returns The Invitation object.\n   */\n  sendInvitation: (\n    authToken: string,\n    invitation: Partial<Omit<Invitation, 'invitationID'>>\n  ) =>\n    apiFetcher(`/SendInvitation/${authToken}`, {\n      apiUrl,\n      method: 'POST',\n      body: invitation,\n    }) as Promise<ResponseSpec & { invitation: Invitation }>,\n});\n","import memori from './backend/memori';\nimport user from './backend/user';\nimport integration from './backend/integration';\nimport asset from './backend/asset';\nimport invitation from './backend/invitation';\n\nconst backendAPI = (apiUrl: string) => ({\n  asset: asset(apiUrl),\n  memori: memori(apiUrl),\n  user: user(apiUrl),\n  integration: integration(apiUrl),\n  invitation: invitation(apiUrl),\n  ...asset(apiUrl),\n  ...memori(apiUrl),\n  ...user(apiUrl),\n  ...integration(apiUrl),\n  ...invitation(apiUrl),\n});\n\nexport default backendAPI;\n","import { ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/****************************\n *                          *\n *     CorrelationPairs     *\n *                          *\n ****************************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Lists all Correlation Pair objects.\n   * @param {string} sessionId The session ID\n   */\n  getCorrelationPairs: async (sessionId: string) =>\n    apiFetcher(`/CorrelationPairs/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Removes an existing Correlation Pair object.\n   * @param {string} sessionId The session ID\n   * @param {string} pairId The Correlation Pair object ID\n   */\n  deleteCorrelationPair: async (sessionId: string, pairId: string) =>\n    apiFetcher(`/CorrelationPair/${sessionId}/${pairId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import { DialogState, Medium, ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/******************\n *                *\n *     Dialog     *\n *                *\n ******************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Submits a Text Entered event to the session's Dialog State Machine.\n   * @param {object} params\n   * @param {string} params.sessionId The session ID\n   * @param {string} params.text The text entered by the user\n   */\n  postTextEnteredEvent: async ({\n    sessionId,\n    text,\n  }: {\n    sessionId: string;\n    text: string;\n  }) =>\n    apiFetcher(`/TextEnteredEvent/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n      body: {\n        text,\n      },\n    }) as Promise<\n      ResponseSpec & {\n        currentState: DialogState;\n      }\n    >,\n\n  /**\n   * Submits a Place Changed event to the session's Dialog State Machine.\n   * @param {object} params\n   * @param {string} params.sessionId - The session ID\n   * @param {string} params.placeName - The name of the place\n   * @param {number} params.latitude - The latitude of the place\n   * @param {number} params.longitude - The longitude of the place\n   * @param {number} params.uncertaintyKm - The uncertainty of the place in kilometers\n   */\n  postPlaceChangedEvent: async ({\n    sessionId,\n    placeName,\n    latitude,\n    longitude,\n    uncertaintyKm,\n  }: {\n    sessionId: string;\n    placeName: string;\n    latitude: number;\n    longitude: number;\n    uncertaintyKm?: number;\n  }) =>\n    apiFetcher(`/PlaceChangedEvent/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n      body: {\n        placeName,\n        latitude,\n        longitude,\n        uncertaintyKm,\n      },\n    }) as Promise<\n      ResponseSpec & {\n        currentState: DialogState;\n      }\n    >,\n\n  /**\n   * Submits a Date Changed event to the session's Dialog State Machine.\n   * @param {string} sessionId The session ID\n   */\n  postDateChangedEvent: async (sessionId: string) =>\n    apiFetcher(`/DateChangedEvent/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Submits a Tag Changed event to the session's Dialog State Machine.\n   * @param {string} sessionId The session ID\n   * @param {string} tag The tag to set\n   */\n  postTagChangedEvent: async (sessionId: string, tag: string) =>\n    apiFetcher(`/TagChangedEvent/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n      body: { tag },\n    }) as Promise<\n      ResponseSpec & {\n        currentState: DialogState;\n      }\n    >,\n\n  /**\n   * Submits a Timeout event to the session's Dialog State Machine.\n   * @param {string} sessionId The session ID\n   */\n  postTimeoutEvent: async (sessionId: string) =>\n    apiFetcher(`/TimeoutEvent/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        currentState: DialogState;\n      }\n    >,\n\n  /**\n   * Submits a Medium Selected event to the session's Dialog State Machine.\n   * @param {string} sessionId The session ID\n   * @param {Medium} medium The medium to set\n   */\n  postMediumSelectedEvent: async (sessionId: string, medium: Medium) =>\n    apiFetcher(`/MediumSelectedEvent/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n      body: { medium },\n    }) as Promise<\n      ResponseSpec & {\n        currentState: DialogState;\n      }\n    >,\n\n  /**\n   * Submits a Date Selected event to the session's Dialog State Machine.\n   * @param {string} sessionId The session ID\n   */\n  postDateSelectedEvent: async ({ sessionId }: { sessionId: string }) =>\n    apiFetcher(`/DateSelectedEvent/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Submits a Place Selected event to the session's Dialog State Machine.\n   * @param {string} sessionId The session ID\n   */\n  postPlaceSelectedEvent: async ({ sessionId }: { sessionId: string }) =>\n    apiFetcher(`/PlaceSelectedEvent/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Submits a Tag Selected event to the session's Dialog State Machine.\n   * @param {string} sessionId The session ID\n   */\n  postTagSelectedEvent: async ({ sessionId }: { sessionId: string }) =>\n    apiFetcher(`/TagSelectedEvent/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import { ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\nexport interface ImportExportBody {\n  csvRows: string[];\n  questionColumnName: string;\n  answerColumnName: string;\n  propertyColumnNames: string[];\n  includedRows: number[];\n  csvSeparator: string;\n  questionTitleVariantsSeparator: string;\n  hasHeaders: boolean;\n  forceImport: boolean;\n  headerNames: string[];\n}\n\nexport interface ImportExportReponse {\n  importID: string;\n  importedMemories: number;\n  importWarnings?: {\n    warningType: string;\n  }[];\n}\n\n/************************\n *                      *\n *     ImportExport     *\n *                      *\n ************************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Imports memories from a CSV file.\n   * @param {string} sessionId The session ID\n   * @param {ImportExportBody} csvData The CSV content info to import\n   */\n  postImportExport: async (sessionId: string, csvData: ImportExportBody) =>\n    apiFetcher(`/ImportExport/ImportCSV/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n      body: csvData,\n    }) as Promise<ResponseSpec & ImportExportReponse>,\n});\n","import { ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/*******************\n *                 *\n *     Intents     *\n *                 *\n *******************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Lists all Intent objects.\n   * @param {string} sessionId The session ID\n   */\n  getIntents: async (sessionId: string) =>\n    apiFetcher(`/Intents/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Gets the details of an Intent object.\n   * @param {string} sessionId The session ID\n   * @param {string} intentId The Intent object ID\n   */\n  getIntent: async (sessionId: string, intentId: string) =>\n    apiFetcher(`/Intent/${sessionId}/${intentId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Updates an existing Intent object.\n   * @param {string} sessionId The session ID\n   * @param {string} intentId The Intent object ID\n   */\n  patchIntent: async (sessionId: string, intentId: string) =>\n    apiFetcher(`/Intent/${sessionId}/${intentId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Removes an existing Intent object.\n   * @param {string} sessionId The session ID\n   * @param {string} intentId The Intent object ID\n   */\n  deleteIntent: async (sessionId: string, intentId: string) =>\n    apiFetcher(`/Intent/${sessionId}/${intentId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Adds a new Intent object.\n   * @param {string} sessionId The session ID\n   */\n  postIntent: async (sessionId: string) =>\n    apiFetcher(`/Intent/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Lists all Intent Slot objects.\n   * @param {string} sessionId The session ID\n   */\n  getIntentSlots: async (sessionId: string) =>\n    apiFetcher(`/IntentSlots/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Gets the details of an Intent Slot object.\n   * @param {string} sessionId The session ID\n   * @param {string} slotId The Intent Slot object ID\n   */\n  getIntentSlot: async (sessionId: string, slotId: string) =>\n    apiFetcher(`/IntentSlot/${sessionId}/${slotId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Updates an existing Intent Slot object.\n   * @param {string} sessionId The session ID\n   * @param {string} slotId The Intent Slot object ID\n   */\n  patchIntentSlot: async (sessionId: string, slotId: string) =>\n    apiFetcher(`/IntentSlot/${sessionId}/${slotId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Removes an existing Intent Slot object.\n   * @param {string} sessionId The session ID\n   * @param {string} slotId The Intent Slot object ID\n   */\n  deleteIntentSlot: async (sessionId: string, slotId: string) =>\n    apiFetcher(`/IntentSlot/${sessionId}/${slotId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Adds a new Intent Slot object.\n   * @param {string} sessionId The session ID\n   */\n  postIntentSlot: async (sessionId: string) =>\n    apiFetcher(`/IntentSlot/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import {\n  ResponseSpec,\n  LocalizationKey,\n  LocalizationKeyContent,\n} from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/****************************\n *                          *\n *     LocalizationKeys     *\n *                          *\n ****************************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Lists all Localizaiton Keys.\n   * @param {string} sessionId The session ID\n   */\n  getLocalizationKeys: async (sessionId: string) =>\n    apiFetcher(`/LocalizationKeys/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        localizationKeys: LocalizationKey[];\n      }\n    >,\n\n  /**\n   * Get an existing Localizaiton Key.\n   * @param {string} sessionId The session ID\n   * @param {string} key The key of the Localization Key\n   */\n  getLocalizationKey: async (sessionId: string, key: string) =>\n    apiFetcher(`/LocalizationKey/${sessionId}/${key}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        localizationKey: LocalizationKey;\n      }\n    >,\n\n  /**\n   * Removes an existing Localizaiton Key. This is only possible if the key is part of\n   *  a key set, where a key set is a set of keys of a common prefix and an index,\n   *  e.g.: <code>INPUT_QUIT_1</code>, <code>INPUT_QUIT_2</code> etc.\n   *  Any index can be specified, the key set will be reordered appropriately.\n   * @param {string} sessionId The session ID\n   * @param {string} key The key of the Localization Key\n   */\n  deleteLocalizationKey: async (sessionId: string, key: string) =>\n    apiFetcher(`/LocalizationKey/${sessionId}/${key}`, {\n      method: 'DELETE',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Add an new Localization Key. This is only possible if the key is part of\n   *  a key set, where a key set is a set of keys of a common prefix and an index,\n   *  e.g.: <code>INPUT_QUIT_1</code>, <code>INPUT_QUIT_2</code> etc.\n   *  Any index can be specified, the key set will be reordered appropriately.\n   * @param {string} sessionId The session ID\n   * @param {LocalizaitonKeyContent} localizationKey Localization Key\n   */\n  postLocalizationKey: async (\n    sessionId: string,\n    localizationKey: LocalizationKeyContent\n  ) =>\n    apiFetcher(`/LocalizationKey/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n      body: localizationKey,\n    }) as Promise<\n      ResponseSpec & {\n        localizationKey: LocalizationKey;\n      }\n    >,\n\n  /**\n   * Updates an existing Localization Key.\n   * @param {string} sessionId The session ID\n   * @param {LocalizationKey} localizationKey Localization Key\n   */\n  patchLocalizationKey: async (\n    sessionId: string,\n    localizationKey: LocalizationKey\n  ) =>\n    apiFetcher(`/LocalizationKey/${sessionId}`, {\n      method: 'PATCH',\n      apiUrl,\n      body: localizationKey,\n    }) as Promise<ResponseSpec>,\n});\n","import { ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/*****************\n *               *\n *     Media     *\n *               *\n *****************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Lists all Medium objects of a Memory.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   */\n  getMedia: async (sessionId: string, memoryId: string) =>\n    apiFetcher(`/Media/${sessionId}/${memoryId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Removes all Medium objects from a Memory.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   */\n  deleteMedia: async (sessionId: string, memoryId: string) =>\n    apiFetcher(`/Media/${sessionId}/${memoryId}`, {\n      method: 'DELETE',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Gets the details of a Medium object of a Memory.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   * @param {string} mediumId The Medium object ID\n   */\n  getMedium: async (sessionId: string, memoryId: string, mediumId: string) =>\n    apiFetcher(`/Medium/${sessionId}/${memoryId}/${mediumId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Updates an existing Medium object of a Memory.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   * @param {string} mediumId The Medium object ID\n   */\n  patchMedium: async (sessionId: string, memoryId: string, mediumId: string) =>\n    apiFetcher(`/Medium/${sessionId}/${memoryId}/${mediumId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Removes an existing Medium object from a Memory.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   * @param {string} mediumId The Medium object ID\n   */\n  deleteMedium: (sessionId: string, memoryId: string, mediumId: string) =>\n    apiFetcher(`/Medium/${sessionId}/${memoryId}/${mediumId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Adds a new Medium object to a Memory.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   */\n  postMedium: async (sessionId: string, memoryId: string) =>\n    apiFetcher(`/Medium/${sessionId}/${memoryId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import { ResponseSpec, Memori } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/******************\n *                *\n *     Memori     *\n *                *\n ******************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Registration of a new Memori object.\n   * @param {Memori} memori - The Memori object\n   */\n  postMemori: async (memori: Partial<Omit<Memori, 'memoriID'>>) =>\n    apiFetcher(`/Memori`, {\n      method: 'POST',\n      apiUrl,\n      body: memori,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Updates an existing Memori object.\n   * @param {Memori} memori - The Memori object\n   */\n  patchMemori: async (memori: Partial<Memori> & { memoriID: string }) =>\n    apiFetcher(`/Memori/${memori.memoriID}`, {\n      method: 'PATCH',\n      apiUrl,\n      body: memori,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Deletes an existing Memori object.\n   * @param {string} memoriId The Memori object ID\n   */\n  deleteMemori: async (memoriId: string) =>\n    apiFetcher(`/Memori/${memoriId}`, {\n      method: 'DELETE',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Lists Memori objects, with optional filtering.\n   */\n  postSearchMemori: async () =>\n    apiFetcher(`/SearchMemori`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import { Memory, ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/********************\n *                  *\n *     Memories     *\n *                  *\n ********************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Lists all Memory objects.\n   * @param {string} sessionId The session ID\n   */\n  getMemories: async (sessionId: string) =>\n    apiFetcher(`/Memories/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memories: Memory[];\n      }\n    >,\n\n  /**\n   * Gets the details of a Memory object.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   */\n  getMemory: async (sessionId: string, memoryId: string) =>\n    apiFetcher(`/Memory/${sessionId}/${memoryId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memory: Memory;\n      }\n    >,\n\n  /**\n   * Updates an existing Memory object.\n   * @param {string} sessionId The session ID\n   * @param {Memory} memory The Memory object\n   */\n  patchMemory: async (sessionId: string, memory: Memory) =>\n    apiFetcher(`/Memory/${sessionId}/${memory.memoryID}`, {\n      method: 'PATCH',\n      apiUrl,\n      body: memory,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Removes an existing Memory object.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   */\n  deleteMemory: async (sessionId: string, memoryId: string) =>\n    apiFetcher(`/Memory/${sessionId}/${memoryId}`, {\n      method: 'DELETE',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Adds a new Memory object.\n   * @param {string} sessionId The session ID\n   * @param {Memory} memory The Memory object\n   */\n  postMemory: async (sessionId: string, memory: Memory) =>\n    apiFetcher(`/Memory/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n      body: memory,\n    }) as Promise<\n      ResponseSpec & {\n        memoryID: string;\n      }\n    >,\n\n  /**\n   * Checks if a Memory object is accessible from the specified session.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   */\n  getMemoryAccess: async (sessionId: string, memoryId: string) =>\n    apiFetcher(`/MemoryAccess/${sessionId}/${memoryId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import { ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/***************\n *             *\n *     NLP     *\n *             *\n ***************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Looks up the vector definition for a word.\n   * @param {string} sessionId The session ID\n   * @param {string} word Word to be looked up\n   */\n  getWordVector: async (sessionId: string, word: string) =>\n    apiFetcher(`/WordVector/${sessionId}/${word}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Tries to guess the language of a sentence by analyzing key word occurrences.\n   * @param {string} sessionId The session ID\n   * @param {string} text Text to be used for guessing the language.\n   */\n  guessLanguage: async (sessionId: string, text: string) =>\n    apiFetcher(`/GuessLanguage/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n      body: { text },\n    }) as Promise<\n      ResponseSpec & {\n        languageGuesses: {\n          [lang: string]: number;\n        };\n      }\n    >,\n});\n","import { ResponseSpec, Person } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/******************\n *                *\n *     People     *\n *                *\n ******************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Lists all Person objects.\n   * @param {string} sessionId The session ID\n   */\n  getPeople: async (sessionId: string) =>\n    apiFetcher(`/People/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        people: Person[];\n      }\n    >,\n\n  /**\n   * Gets the details of a Person object.\n   * @param {string} sessionId The session ID\n   * @param {string} personId The Person object ID\n   */\n  getPerson: async (sessionId: string, personId: string) =>\n    apiFetcher(`/Person/${sessionId}/${personId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        person: Person;\n      }\n    >,\n\n  /**\n   * Updates an existing Person object.\n   * @param {string} sessionId The session ID\n   * @param {Person} person The Person object\n   */\n  patchPerson: async (sessionId: string, person: Person) =>\n    apiFetcher(`/Person/${sessionId}/${person.personID!}`, {\n      method: 'PATCH',\n      body: person,\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        person: Person;\n      }\n    >,\n\n  /**\n   * Removes an existing Person object.\n   * @param {string} sessionId The session ID\n   * @param {string} personId The Person object ID\n   */\n  deletePerson: async (sessionId: string, personId: string) =>\n    apiFetcher(`/Person/${sessionId}/${personId}`, {\n      method: 'DELETE',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Adds a new Person object.\n   * @param {string} sessionId - The session ID\n   * @param {Person} person - The Person object\n   */\n  postPerson: async (sessionId: string, person: Person) =>\n    apiFetcher(`/Person/${sessionId}`, {\n      method: 'POST',\n      body: person,\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        person: Person;\n      }\n    >,\n});\n","import { ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/*****************************\n *                           *\n *     PromptedQuestions     *\n *                           *\n *****************************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Lists all Prompted Question objects.\n   * @param {string} sessionId The session ID\n   */\n  getPromptedQuestions: async (sessionId: string) =>\n    apiFetcher(`/PromptedQuestions/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Gets the details of a Prompted Question object.\n   * @param {string} sessionId The session ID\n   * @param {string} promptId The Prompted Question object ID\n   */\n  getPromptedQuestion: async (sessionId: string, promptId: string) =>\n    apiFetcher(`/PromptedQuestion/${sessionId}/${promptId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Updates an existing Prompted Question object.\n   * @param {string} sessionId The session ID\n   * @param {string} promptId The Prompted Question object ID\n   */\n  patchPromptedQuestion: async (sessionId: string, promptId: string) =>\n    apiFetcher(`/PromptedQuestion/${sessionId}/${promptId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Removes an existing Prompted Question object.\n   * @param {string} sessionId The session ID\n   * @param {string} promptId The Prompted Question object ID\n   */\n  deletePromptedQuestion: async (sessionId: string, promptId: string) =>\n    apiFetcher(`/PromptedQuestion/${sessionId}/${promptId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Adds a new Prompted Question object.\n   * @param {string} sessionId The session ID\n   */\n  postPromptedQuestion: async (sessionId: string) =>\n    apiFetcher(`/PromptedQuestion/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import { ResponseSpec, SearchQuery, SearchMatches } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/******************\n *                *\n *     Search     *\n *                *\n ******************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Searches for matching Memory objects using the same algorithm employed in the Text Entered event of the R1 state of the Dialog State Machine.\n   * @param {string} sessionId The session ID\n   * @param {SearchQuery} query Search query params\n   */\n  searchMemory: async (sessionId: string, query?: SearchQuery) =>\n    apiFetcher(`/Search/${sessionId}`, {\n      method: 'POST',\n      body: query,\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        matches: SearchMatches[];\n      }\n    >,\n\n  /**\n   * Picks up to 5 random Memory objects using the same algorithm employed in the\n   * Timeout event of the R1 state of the Dialog State Machine.\n   * @param {string} sessionId The session ID\n   */\n  postRandom: async (sessionId: string) =>\n    apiFetcher(`/Random/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Picks up to 20 Memory Hint objects, obtained by searching for Story objects with a date or place set,\n   * and clustering dates and places within an uncertainty of at least 1 year or at least 100 km.\n   * Each Memory Hint may either suggest a date or a place, but not both.\n   * @param {string} sessionId The session ID\n   */\n  postHints: async (sessionId: string) =>\n    apiFetcher(`/Hints/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import { ResponseSpec, OpenSession, DialogState } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/*******************\n *                 *\n *     Session     *\n *                 *\n *******************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Initializes a new Dialog State Machine session for an existing Memori.\n   */\n  initSession: async (params: OpenSession) =>\n    apiFetcher(`/Session`, {\n      method: 'POST',\n      body: params,\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        sessionID: string;\n        currentState: DialogState;\n      }\n    >,\n\n  /**\n   * Returns the current state of a session's Dialog State Machine.\n   * @param {string} sessionId The session ID\n   */\n  getSession: async (sessionId: string) =>\n    apiFetcher(`/Session/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        currentState: DialogState;\n      }\n    >,\n\n  /**\n   * Closes the session and disposes of its Dialog State Machine.\n   * @param {string} sessionId The session ID\n   */\n  deleteSession: async (sessionId: string) =>\n    apiFetcher(`/Session/${sessionId}`, {\n      method: 'DELETE',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import { ResponseSpec, Stats, EventLog } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/*****************\n *               *\n *     Stats     *\n *               *\n *****************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Computes usage statistics for the Memori of the current session.\n   * @param {string} sessionId The session ID\n   */\n  getStatistics: async (sessionId: string) =>\n    apiFetcher(`/Statistics/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        statistics: Stats;\n      }\n    >,\n\n  /**\n   * Get the Event Log objects for the Memori of the current session in a specific date interval\n   * @param {string} sessionId The session ID\n   * @param {string} strDateFrom The optional begin of the date interval, in UTC time, in the format yyyyMMddHHmmssfff\n   * @param {string} strDateTo The optional end of the date interval, in UTC time, in the format yyyyMMddHHmmssfff\n   */\n  getEventLogs: async (\n    sessionId: string,\n    strDateFrom: string,\n    strDateTo: string\n  ) =>\n    apiFetcher(`/EventLogs/${sessionId}/${strDateFrom}/${strDateTo}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        eventLogs: EventLog[];\n      }\n    >,\n});\n","import { ResponseSpec, UnansweredQuestion } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/*******************************\n *                             *\n *     UnansweredQuestions     *\n *                             *\n *******************************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Lists all Unanswered Question objects.\n   * @param {string} sessionId The session ID\n   */\n  getUnansweredQuestions: async (sessionId: string) =>\n    apiFetcher(`/UnansweredQuestions/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        unansweredQuestions: UnansweredQuestion[];\n      }\n    >,\n\n  /**\n   * Removes an existing Unanswered Question object.\n   * @param {string} sessionId The session ID\n   * @param {string} unansweredQuestionId The Unanswered Question object ID\n   */\n  deleteUnansweredQuestion: async (\n    sessionId: string,\n    unansweredQuestionId: string\n  ) =>\n    apiFetcher(`/UnansweredQuestion/${sessionId}/${unansweredQuestionId}`, {\n      method: 'DELETE',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import { ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/********************\n *                  *\n *     WebHooks     *\n *                  *\n ********************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Returns test slot values. Currently available test slots are:<ul><li><code>number</code>: integer numbers between 1 and 10</li><li><code>letter</code>: uppercase letters between A and Z</li><li><code>greek_letter</code>: capitalized Greek letters between Alpha and Omega</li></ul>\n   */\n  postTestSlot: async () =>\n    apiFetcher(`/TestSlot`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n      * Returns test intent results. Currently available test intents are:<ul><li><code>ECHO</code>: emits the intent utterance as-is.</li><li><code>COMBINE_LETTER_AND_NUMBER</code>: requires a letter slot and a number slot,\n   emits the content of the two slots in justaxposition, e.g. \"A10\".</li><li><code>DATE_RANGE</code>: requires a date slot, emits the date range indicated\n   by the date slot in the format \"yyyy/MM/dd - yyyy/MM/dd\".</li><li><code>AUTOINCREMENT</code>: returns a progressive number that increments by 1\n   each time the intent is called.</li><li><code>FIBONACCI</code>: returns the next element of the Fibonacci series, using\n   context variables to store the series progression.</li></ul>\n      */\n  postTestIntent: async () =>\n    apiFetcher(`/TestIntent`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import correlationPairs from './engine/correlationPairs';\nimport dialog from './engine/dialog';\nimport importExport from './engine/importExport';\nimport intents from './engine/intents';\nimport localizationKeys from './engine/localizationKeys';\nimport media from './engine/media';\nimport memori from './engine/memori';\nimport memories from './engine/memories';\nimport nlp from './engine/nlp';\nimport people from './engine/people';\nimport promptedQuestions from './engine/promptedQuestions';\nimport search from './engine/search';\nimport session from './engine/session';\nimport stats from './engine/stats';\nimport unansweredQuestions from './engine/unansweredQuestions';\nimport webhooks from './engine/webhooks';\n\nexport default (apiUrl: string) => ({\n  correlationPairs: correlationPairs(apiUrl),\n  ...correlationPairs(apiUrl),\n  dialog: dialog(apiUrl),\n  ...dialog(apiUrl),\n  importExport: importExport(apiUrl),\n  ...importExport(apiUrl),\n  intents: intents(apiUrl),\n  ...intents(apiUrl),\n  localizationKeys: localizationKeys(apiUrl),\n  ...localizationKeys(apiUrl),\n  media: media(apiUrl),\n  ...media(apiUrl),\n  memori: memori(apiUrl),\n  ...memori(apiUrl),\n  memories: memories(apiUrl),\n  ...memories(apiUrl),\n  nlp: nlp(apiUrl),\n  ...nlp(apiUrl),\n  people: people(apiUrl),\n  ...people(apiUrl),\n  promptedQuestions: promptedQuestions(apiUrl),\n  ...promptedQuestions(apiUrl),\n  search: search(apiUrl),\n  ...search(apiUrl),\n  session: session(apiUrl),\n  ...session(apiUrl),\n  stats: stats(apiUrl),\n  ...stats(apiUrl),\n  unansweredQuestions: unansweredQuestions(apiUrl),\n  ...unansweredQuestions(apiUrl),\n  webhooks: webhooks(apiUrl),\n  ...webhooks(apiUrl),\n});\n","export const allowedMediaTypes = [\n  'image/jpeg',\n  'image/png',\n  'image/jpg',\n  'image/gif',\n  'text/plain',\n  'application/msword',\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'application/vnd.ms-excel',\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  'application/pdf',\n  'video/mp4',\n  'video/avi',\n  'audio/mpeg3',\n  'audio/wav',\n  'audio/mpeg',\n  'video/mpeg',\n  'model/gltf-binary',\n];\n\nexport const anonTag = '👤';\n","import * as speechSdk from 'microsoft-cognitiveservices-speech-sdk';\n\nconst getTTSVoice = (lang: string, voiceType: 'MALE' | 'FEMALE'): string => {\n  let voice = '';\n  let voiceLang = lang.toUpperCase();\n  switch (voiceLang) {\n    case 'IT':\n      voice = `${\n        voiceType === 'MALE' ? 'it-IT-DiegoNeural' : 'it-IT-ElsaNeural'\n      }`;\n      break;\n    case 'DE':\n      voice = `${\n        voiceType === 'MALE' ? 'de-DE-ConradNeural' : 'de-DE-KatjaNeural'\n      }`;\n      break;\n    case 'EN':\n      voice = `${\n        voiceType === 'MALE' ? 'en-GB-RyanNeural' : 'en-GB-SoniaNeural'\n      }`;\n      break;\n    case 'ES':\n      voice = `${\n        voiceType === 'MALE' ? 'es-ES-AlvaroNeural' : 'es-ES-ElviraNeural'\n      }`;\n      break;\n    case 'FR':\n      voice = `${\n        voiceType === 'MALE' ? 'fr-FR-HenriNeural' : 'fr-FR-DeniseNeural'\n      }`;\n      break;\n    case 'PT':\n      voice = `${\n        voiceType === 'MALE' ? 'pt-PT-DuarteNeural' : 'pt-PT-RaquelNeural'\n      }`;\n      break;\n    default:\n      voice = `${\n        voiceType === 'MALE' ? 'it-IT-DiegoNeural' : 'it-IT-IsabellaNeural'\n      }`;\n      break;\n  }\n  return voice;\n};\n\nconst getCultureCodeByLanguage = (lang: string): string => {\n  let voice = '';\n  let voiceLang = lang.toUpperCase();\n  switch (voiceLang) {\n    case 'IT':\n      voice = 'it-IT';\n      break;\n    case 'DE':\n      voice = 'de-DE';\n      break;\n    case 'EN':\n      voice = 'en-US';\n      break;\n    case 'ES':\n      voice = 'es-ES';\n      break;\n    case 'FR':\n      voice = 'fr-FR';\n      break;\n    case 'PT':\n      voice = 'pt-PT';\n      break;\n    default:\n      voice = 'it-IT';\n      break;\n  }\n  return voice;\n};\n\nconst speech = (AZURE_COGNITIVE_SERVICES_TTS_KEY: string, DEBUG = false) => (\n  lang: string,\n  voiceType: 'FEMALE' | 'MALE'\n) => {\n  speechSdk.Recognizer.enableTelemetry(false);\n\n  let speechConfig: speechSdk.SpeechConfig = speechSdk.SpeechConfig.fromSubscription(\n    AZURE_COGNITIVE_SERVICES_TTS_KEY,\n    'eastus'\n  );\n  let speechSynthesizer: speechSdk.SpeechSynthesizer | null;\n  let audioDestination: speechSdk.SpeakerAudioDestination;\n\n  audioDestination = new speechSdk.SpeakerAudioDestination();\n  let audioOutputConfig = speechSdk.AudioConfig.fromSpeakerOutput(\n    audioDestination\n  );\n\n  // https://docs.microsoft.com/it-it/azure/cognitive-services/speech-service/language-support#text-to-speech\n  speechConfig.speechSynthesisVoiceName = getTTSVoice(lang, voiceType);\n\n  let langCultureCode = getCultureCodeByLanguage(lang);\n  speechConfig.speechSynthesisLanguage = langCultureCode;\n  speechConfig.speechRecognitionLanguage = langCultureCode;\n\n  /**\n   * speak\n   * @description Speaks the text using the speech synthesizer. (TTS)\n   * @param {string} text - The text to be synthesized.\n   * @param {func=} onAudioEnd - The callback to be invoked when the synthesized audio is finished.\n   */\n  const speak = (\n    text: string,\n    onAudioEnd?: (sender: speechSdk.IPlayer) => void\n  ) => {\n    stopSpeaking();\n\n    speechSynthesizer = new speechSdk.SpeechSynthesizer(\n      speechConfig,\n      audioOutputConfig\n    );\n\n    if (onAudioEnd) audioDestination.onAudioEnd = onAudioEnd;\n\n    speechSynthesizer.speakTextAsync(\n      text,\n      result => {\n        if (result) {\n          try {\n            if (DEBUG) console.log('speak result', result);\n            if (speechSynthesizer) {\n              speechSynthesizer.close();\n              speechSynthesizer = null;\n            }\n          } catch (e) {\n            console.error('speak error: ', e);\n            window.speechSynthesis.speak(new SpeechSynthesisUtterance(text));\n          }\n        } else if (DEBUG) {\n          console.log('speak no result', result);\n        }\n      },\n      error => {\n        console.error('speak:', error);\n        window.speechSynthesis.speak(new SpeechSynthesisUtterance(text));\n      }\n    );\n  };\n\n  /**\n   * isSpeaking\n   * @description Returns true if the synthesizer is speaking.\n   * @returns {boolean}\n   */\n  const isSpeaking = (): boolean => {\n    return !!speechSynthesizer;\n  };\n\n  /**\n   * stopSpeaking\n   * @description Stops the speech synthesizer if it is synthesizing.\n   */\n  const stopSpeaking = () => {\n    if (audioDestination) audioDestination.pause();\n    if (speechSynthesizer) {\n      speechSynthesizer.close();\n      speechSynthesizer = null;\n    }\n  };\n\n  const audioInputConfig = speechSdk.AudioConfig.fromDefaultMicrophoneInput();\n  let recognizer: speechSdk.SpeechRecognizer | null;\n\n  /**\n   * recognize\n   * @description Starts the speech recognition.\n   * @param {func=} onRecognized - Callback method invoked when the speech is recognized with the text.\n   */\n  const recognize = (onRecognized: (transcript: string) => void) => {\n    recognizer = new speechSdk.SpeechRecognizer(speechConfig, audioInputConfig);\n\n    recognizer.recognizing = (_s, e) => {\n      if (DEBUG) console.log(`RECOGNIZING: Text=${e.result.text}`);\n    };\n    recognizer.recognized = (_s, e) => {\n      if (e.result.reason === speechSdk.ResultReason.RecognizedSpeech) {\n        if (DEBUG) console.log(`RECOGNIZED: Text=${e.result.text}`);\n        onRecognized(e.result.text ?? '');\n      } else if (e.result.reason === speechSdk.ResultReason.NoMatch && DEBUG) {\n        console.log('NOMATCH: Speech could not be recognized.');\n      }\n    };\n    recognizer.canceled = (_s, e) => {\n      if (DEBUG) console.log(`CANCELED: Reason=${e.reason}`);\n\n      if (e.reason === speechSdk.CancellationReason.Error && DEBUG) {\n        console.log(`\"CANCELED: ErrorCode=${e.errorCode}`);\n        console.log(`\"CANCELED: ErrorDetails=${e.errorDetails}`);\n        console.log(\n          'CANCELED: Did you set the speech resource key and region values?'\n        );\n      }\n\n      stopRecognizing();\n    };\n\n    recognizer.sessionStopped = (_s, _e) => {\n      if (DEBUG) console.log('\\n    Session stopped event.');\n      if (recognizer) recognizer.stopContinuousRecognitionAsync();\n    };\n    recognizer.startContinuousRecognitionAsync();\n  };\n\n  /**\n   * isRecognizing\n   * @description Returns true if the recognizer is recognizing.\n   * @returns {boolean}\n   */\n  const isRecognizing = (): boolean => {\n    return !!recognizer;\n  };\n\n  /**\n   * stopRecognizing\n   * @description Stops the speech recognizer if it is recognizing.\n   * @param {func=} onStop - (optional) The callback to be invoked when the speech recognition is stopped.\n   */\n  const stopRecognizing = (onStop?: () => void) => {\n    if (recognizer) {\n      recognizer.stopContinuousRecognitionAsync();\n      recognizer.close();\n      recognizer = null;\n\n      if (onStop) onStop();\n    }\n  };\n\n  return {\n    speak,\n    isSpeaking,\n    stopSpeaking,\n    recognize,\n    isRecognizing,\n    stopRecognizing,\n  };\n};\n\nexport default speech;\n","export interface ResourceURLParams {\n  type?: 'avatar' | 'cover' | 'default';\n  resourceURI?: string;\n  sessionID?: string;\n  baseURL?: string;\n}\n\nexport default (apiUrl: string) => ({\n  /**\n   * getResourceUrl\n   * @description Returns the correct URL of a resource from the DB.\n   * @param {obj} params\n   * @param {string=} params.type - wheather is the avatar or the cover\n   * @param {string=} params.resourceURI - the resource URI\n   * @param {string=} params.sessionID - the session ID, required for memory media attachments\n   * @param {string=} params.baseURL - the base URL for default static assets (defaults to https://app.twincreator.com)\n   * @returns {string}\n   */\n  getResourceUrl: ({\n    type,\n    resourceURI,\n    sessionID,\n    baseURL = 'https://app.twincreator.com',\n  }: ResourceURLParams): string => {\n    let defaultUri =\n      type === 'cover'\n        ? `${baseURL}/images/memoriCover.png`\n        : `${baseURL}/images/memoriAvatar.png`;\n    if (!resourceURI || resourceURI.length === 0) {\n      return defaultUri;\n    } else if (resourceURI.includes('memoriai/memory')) {\n      return `${resourceURI}?memori-ai-session-id=${sessionID}`;\n    } else if (\n      resourceURI.startsWith('https://') ||\n      resourceURI.startsWith('http://')\n    ) {\n      return `${resourceURI}${sessionID ? `/${sessionID}` : ''}`;\n    } else if (resourceURI.startsWith('cloud://')) {\n      return `${apiUrl.replace(/v2/, 'v1')}/CloudAsset/${resourceURI.replace(\n        'cloud://',\n        ''\n      )}`;\n    } else if (resourceURI.startsWith('guid://')) {\n      return `${apiUrl.replace(/v2/, 'v1')}/GuidAsset/${resourceURI.replace(\n        'guid://',\n        ''\n      )}`;\n    } else {\n      return defaultUri;\n    }\n  },\n});\n","import { getApiUrl } from './helpers/getApiUrl';\nimport backend from './backend';\nimport engine from './engine';\nimport * as constants from './constants';\nimport speech from './speech';\nimport asset from './helpers/asset';\n\nconst api = (hostname?: string) => {\n  const apiUrl = getApiUrl(hostname);\n\n  return {\n    backend: backend(`${apiUrl}/api/v2`),\n    ...engine(`${apiUrl}/memori/v2`),\n    speech,\n    constants,\n    asset: asset(`${apiUrl}/api/v2`),\n  };\n};\n\nexport default api;\n"],"names":["getApiUrl","hostname","URL","startsWith","origin","replace","fetcher","path","opts","fetch","apiUrl","body","JSON","stringify","undefined","mode","credentials","headers","then","res","json","devFetcher","data","Promise","resolve","apiFetcher","process","env","CI","NODE_ENV","getTenantPublicMemoriList","tenant","encodeURI","getPublicMemoriList","authToken","getAllMemori","getUserMemoriList","getSharedMemoriList","getTenantCategories","getMemoriConfigs","createMemori","memori","method","updateMemori","memoriID","deleteMemori","getMemoriById","getMemoriByUserAndId","tenantName","userID","getMemori","userName","memoriName","getMemoriSessions","dateFrom","dateTo","userSignIn","user","userConfirmSignIn","userLogin","userLogout","getUser","getUsersList","deleteUser","updateUser","resetPassword","resetConfirm","recoverUsername","getTenantConfig","resendVerificationCode","createUser","getMemoriIntegrationsList","getAllIntegrationsList","getIntegration","integrationID","deleteIntegration","createIntegration","integration","updateIntegration","getUploadAssetURL","memoryID","uploadAsset","fileName","fileUrl","FormData","file","blob","fileBlob","append","upload","getAsset","sessionID","updateAsset","assetURL","asset","split","reverse","deleteAsset","getSentInvitations","getReceivedInvitations","getAllInvitations","getInvitation","invitationId","updateInvitation","invitation","invitationID","deleteInvitation","acceptInvitation","rejectInvitation","sendInvitation","backendAPI","getCorrelationPairs","sessionId","deleteCorrelationPair","pairId","postTextEnteredEvent","text","postPlaceChangedEvent","placeName","latitude","longitude","uncertaintyKm","postDateChangedEvent","postTagChangedEvent","tag","postTimeoutEvent","postMediumSelectedEvent","medium","postDateSelectedEvent","postPlaceSelectedEvent","postTagSelectedEvent","postImportExport","csvData","getIntents","getIntent","intentId","patchIntent","deleteIntent","postIntent","getIntentSlots","getIntentSlot","slotId","patchIntentSlot","deleteIntentSlot","postIntentSlot","getLocalizationKeys","getLocalizationKey","key","deleteLocalizationKey","postLocalizationKey","localizationKey","patchLocalizationKey","getMedia","memoryId","deleteMedia","getMedium","mediumId","patchMedium","deleteMedium","postMedium","postMemori","patchMemori","memoriId","postSearchMemori","getMemories","getMemory","patchMemory","memory","deleteMemory","postMemory","getMemoryAccess","getWordVector","word","guessLanguage","getPeople","getPerson","personId","patchPerson","person","personID","deletePerson","postPerson","getPromptedQuestions","getPromptedQuestion","promptId","patchPromptedQuestion","deletePromptedQuestion","postPromptedQuestion","searchMemory","query","postRandom","postHints","initSession","params","getSession","deleteSession","getStatistics","getEventLogs","strDateFrom","strDateTo","getUnansweredQuestions","deleteUnansweredQuestion","unansweredQuestionId","postTestSlot","postTestIntent","correlationPairs","dialog","importExport","intents","localizationKeys","media","memories","nlp","people","promptedQuestions","search","session","stats","unansweredQuestions","webhooks","allowedMediaTypes","anonTag","getTTSVoice","lang","voiceType","voice","voiceLang","toUpperCase","getCultureCodeByLanguage","speech","AZURE_COGNITIVE_SERVICES_TTS_KEY","DEBUG","speechSdk","enableTelemetry","speechConfig","fromSubscription","speechSynthesizer","audioDestination","audioOutputConfig","fromSpeakerOutput","speechSynthesisVoiceName","langCultureCode","speechSynthesisLanguage","speechRecognitionLanguage","speak","onAudioEnd","stopSpeaking","speakTextAsync","result","console","log","close","e","error","window","speechSynthesis","SpeechSynthesisUtterance","isSpeaking","pause","audioInputConfig","fromDefaultMicrophoneInput","recognizer","recognize","onRecognized","recognizing","_s","recognized","reason","RecognizedSpeech","NoMatch","canceled","Error","errorCode","errorDetails","stopRecognizing","sessionStopped","_e","stopContinuousRecognitionAsync","startContinuousRecognitionAsync","isRecognizing","onStop","getResourceUrl","type","resourceURI","baseURL","defaultUri","length","includes","api","backend","engine","constants"],"mappings":"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"}