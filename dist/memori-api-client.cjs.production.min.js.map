{"version":3,"file":"memori-api-client.cjs.production.min.js","sources":["../src/helpers/getApiUrl.ts","../src/apiFetcher.ts","../src/backend/memori.ts","../src/backend/user.ts","../src/backend/integration.ts","../src/backend/asset.ts","../src/backend/invitation.ts","../src/backend.ts","../src/engine/correlationPairs.ts","../src/engine/dialog.ts","../src/engine/importExport.ts","../src/engine/intents.ts","../src/engine/localizationKeys.ts","../src/engine/media.ts","../src/engine/memories.ts","../src/engine/nlp.ts","../src/engine/people.ts","../src/engine/promptedQuestions.ts","../src/engine/search.ts","../src/engine/session.ts","../src/engine/stats.ts","../src/engine/unansweredQuestions.ts","../src/engine/contextVars.ts","../src/constants.ts","../src/speech.ts","../src/helpers/asset.ts","../src/index.ts","../src/engine.ts"],"sourcesContent":["export const getApiUrl = (hostname?: string) =>\n  hostname\n    ? new URL(\n        hostname.startsWith('http') ? hostname : `https://${hostname}`\n      ).origin.replace('http://', 'https://')\n    : 'https://backend.memori.ai';\n","import { default as fetch } from 'cross-fetch';\n\nexport const apiFetcher = (\n  path: string,\n  opts: {\n    apiUrl: string;\n    method?: string;\n    body?: object;\n    headers?: object;\n  }\n) =>\n  fetch(`${opts.apiUrl}${path}`, {\n    ...opts,\n    body: opts?.body ? JSON.stringify(opts.body) : undefined,\n    mode: 'cors',\n    credentials: 'include',\n    headers: {\n      // \"Access-Control-Allow-Origin\": \"*\",\n      'Content-Type': 'application/json',\n      ...opts?.headers,\n    },\n  }).then(res => res.json());\n","import { ResponseSpec, Memori, MemoriConfig } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\nexport default (apiUrl: string) => ({\n  /**\n   * Gets a list of all the public Memori objects for a specific Tenant.\n   * @param tenant - The name of the tenant\n   * @returns A list of Memori objects\n   */\n  getTenantPublicMemoriList: (tenant: string) =>\n    apiFetcher(`/TenantPublicMemori/${encodeURI(tenant)}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memori: Memori[];\n      }\n    >,\n\n  /**\n   * Gets a list of all the public Memori objects for a specific Tenant accessible from user session.\n   * @param authToken - The login token\n   * @returns A list of Memori objects\n   */\n  getPublicMemoriList: (authToken: string) =>\n    apiFetcher(`/PublicMemori/${authToken}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memori: Memori[];\n      }\n    >,\n\n  /**\n   * Gets a list of all Memori objects.\n   * @param authToken - The login token\n   * @returns A list of Memori objects\n   */\n  getAllMemori: (authToken: string) =>\n    apiFetcher(`/AllMemori/${authToken}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memori: Memori[];\n      }\n    >,\n\n  /**\n   * Gets a list of Memori objects for the currently logged in User.\n   * @param authToken - The login token\n   * @returns A list of Memori objects\n   */\n  getUserMemoriList: (authToken: string) =>\n    apiFetcher(`/Memori/${authToken}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memori: Memori[];\n      }\n    >,\n\n  /**\n   * Gets a list of Memori objects for the currently logged in User.\n   * @param authToken - The login token\n   * @returns A list of Memori objects\n   */\n  getSharedMemoriList: (authToken: string) =>\n    apiFetcher(`/SharedMemori/${authToken}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memori: Memori[];\n      }\n    >,\n\n  /**\n   * Gets a list of all the known Memori categories (or tags).\n   * @param {string} tenant - The name of the tenant\n   * @returns A list of Memori categories\n   */\n  getTenantCategories: (tenant: string) =>\n    apiFetcher(`/TenantMemoriCategories/${encodeURI(tenant)}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memoriCategories: string[];\n      }\n    >,\n\n  /**\n   * Gets a list of all the Memori Configuration objects.\n   * @param authToken - The login token\n   * @returns A list of Memori Configuration objects\n   */\n  getMemoriConfigs: (authToken: string) =>\n    apiFetcher(`/MemoriConfigs/${authToken}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memoriConfigs: MemoriConfig[];\n      }\n    >,\n\n  /**\n   * Register a new Memori object.\n   * @param authToken - The login token\n   * @param memori - The Memori object\n   * @returns The created Memori object\n   */\n  createMemori: (authToken: string, memori: Memori) =>\n    apiFetcher(`/Memori/${authToken}`, {\n      apiUrl,\n      body: memori,\n      method: 'POST',\n    }) as Promise<ResponseSpec & { memori: Memori }>,\n\n  /**\n   * Update an existing Memori object.\n   * @param authToken - The login token\n   * @param memori - The Memori object\n   * @returns The created Memori object\n   */\n  updateMemori: (\n    authToken: string,\n    memori: Partial<Memori> & { memoriID: string }\n  ) =>\n    apiFetcher(`/Memori/${authToken}/${memori.memoriID}`, {\n      apiUrl,\n      body: memori,\n      method: 'PATCH',\n    }) as Promise<ResponseSpec & { memori: Memori }>,\n\n  /**\n   * Deletes an existing Memori object.\n   * @param authToken - The login token\n   * @param memori - The Memori object\n   */\n  deleteMemori: (authToken: string, memori: Memori) =>\n    apiFetcher(`/Memori/${authToken}`, {\n      apiUrl,\n      body: memori,\n      method: 'DELETE',\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Gets the details of a Memori object of the currently logged in User.\n   * @param authToken - The login token\n   * @param memoriID - The ID of the Memori object\n   * @returns A Memori object\n   */\n  getMemoriById: (authToken: string, memoriID: string) =>\n    apiFetcher(`/Memori/${authToken}/${memoriID}`, {\n      apiUrl,\n    }) as Promise<ResponseSpec & { memori: Memori }>,\n\n  /**\n   * Gets the details of a Memori object of the currently logged in User.\n   * @param {string} tenantName - The Name of the Tenant\n   * @param {string} userID - The ID of the User object\n   * @param {string} memoriID - The ID of the Memori object\n   * @param {string?} authToken - The login token\n   * @returns A Memori object\n   */\n  getMemoriByUserAndId: (\n    tenantName: string,\n    userID: string,\n    memoriID: string,\n    authToken?: string\n  ) =>\n    apiFetcher(\n      `/MemoriById/${tenantName}/${userID}/${memoriID}${\n        authToken ? `/${authToken}` : ''\n      }`,\n      {\n        apiUrl,\n      }\n    ) as Promise<ResponseSpec & { memori: Memori }>,\n\n  /**\n   * Gets the details of a Memori object by name, owner and tenant\n   * @param {string} tenant - The name of the tenant\n   * @param {string} userName - The name of the user\n   * @param {string} memoriName - The name of the Memori object\n   * @param {string=} [authToken=''] - The token of the Memori object\n   */\n  getMemori: (\n    tenant: string,\n    userName: string,\n    memoriName: string,\n    authToken?: string\n  ) =>\n    apiFetcher(\n      `/Memori/${encodeURI(tenant)}/${encodeURI(userName)}/${encodeURI(\n        memoriName\n      )}/${authToken ?? ''}`,\n      {\n        apiUrl,\n      }\n    ) as Promise<ResponseSpec & { memori: Memori }>,\n\n  /**\n   * Gets the statistics for sessions opened in a specified interval for the specified Memori object.\n   * @param {string} authToken - The login token\n   * @param {string} memoriID - The ID of the Memori object\n   * @param {string=} dateFrom - The optional begin of the date interval, in UTC time, in the format yyyyMMddHHmmssfff\n   * @param {string=} dateTo - The optional end of the date interval, in UTC time, in the format yyyyMMddHHmmssfff\n   */\n  getMemoriSessions: (\n    authToken: string,\n    memoriID: string,\n    dateFrom?: string,\n    dateTo?: string\n  ) =>\n    apiFetcher(\n      `/MemoriSessions/${authToken}/${memoriID}${\n        dateFrom ? `/${dateFrom}` : ''\n      }${dateFrom && dateTo ? `/${dateTo}` : ''}`,\n      {\n        apiUrl,\n      }\n    ) as Promise<\n      ResponseSpec & {\n        totalSessions: number;\n        validSessions: number;\n      }\n    >,\n});\n","import { ResponseSpec, Tenant, User } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\nexport default (apiUrl: string) => ({\n  /**\n   * Registers a new user.\n   * @param user - The user object\n   * @returns The created user object\n   */\n  userSignIn: (user: User) =>\n    apiFetcher('/User', {\n      apiUrl,\n      body: user,\n      method: 'POST',\n    }) as Promise<ResponseSpec & { user: User }>,\n\n  /**\n   * Confirms the registration of a User and performs a Login.\n   * @param user - The user object\n   * @returns The created user object\n   */\n  userConfirmSignIn: (user: User) =>\n    apiFetcher('/UserConfirm', {\n      apiUrl,\n      body: user,\n      method: 'POST',\n    }) as Promise<ResponseSpec & { user: User; token?: string }>,\n\n  /**\n   * Tries a login with the specified credentials and returns a login token if successful.\n   * @param user - The user object\n   * @returns The logged in user object\n   */\n  userLogin: (user: User) =>\n    apiFetcher('/Login', {\n      apiUrl,\n      body: user,\n      method: 'POST',\n    }) as Promise<\n      ResponseSpec & { user: User; token?: string; flowID?: string }\n    >,\n\n  /**\n   * Logs out the user.\n   * @param authToken - The login token\n   */\n  userLogout: (authToken: string) =>\n    apiFetcher(`/Logout/${authToken}`, {\n      apiUrl,\n      method: 'POST',\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Gets the details of a User object.\n   * @param authToken - The login token\n   * @param userID - The user ID\n   * @returns The user object\n   */\n  getUser: (authToken: string, userID: string) =>\n    apiFetcher(`/User/${authToken}/${userID}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        user: User;\n      }\n    >,\n\n  /**\n   * Gets a list of all the existing User objects.\n   * @param authToken - The login token\n   * @returns A list of User objects\n   */\n  getUsersList: (authToken: string) =>\n    apiFetcher(`/Users/${authToken}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        users: User[];\n      }\n    >,\n\n  /**\n   * Deletes the currently logged in User.\n   * @param {string} authToken - The login token\n   * @param {string} userID: The User ID\n   */\n  deleteUser: (authToken: string, userID: string) =>\n    apiFetcher(`/User/${authToken}/${userID}`, {\n      apiUrl,\n      method: 'DELETE',\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Updates the details of a User object.\n   * @param authToken - The login token\n   * @param userID - The user ID\n   * @returns The user object\n   */\n  updateUser: (authToken: string, userID: string, user: User) =>\n    apiFetcher(`/User/${authToken}/${userID}`, {\n      apiUrl,\n      method: 'PATCH',\n      body: user,\n    }) as Promise<\n      ResponseSpec & {\n        user: User;\n      }\n    >,\n\n  /**\n   * Resets a User's password.\n   * If found, the User receives a verification code via e-mail.\n   * The code must be sent via the ResetConfirm API, passing the same User object\n   * sent to this API with the addition of the verification code and the new password.\n   * @param {User} user - The user object\n   */\n  resetPassword: (user: User) =>\n    apiFetcher(`/ResetPassword`, {\n      apiUrl,\n      body: user,\n      method: 'POST',\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Confirms the password reset of a User and performs a Login\n   * @param {User} user - The user object\n   */\n  resetConfirm: (user: User) =>\n    apiFetcher(`/ResetConfirm`, {\n      apiUrl,\n      body: user,\n      method: 'POST',\n    }) as Promise<\n      ResponseSpec & {\n        user: User;\n        token?: string;\n        flowID?: string;\n      }\n    >,\n\n  /**\n   * Recovers a User's name and sends it to their configured e-mail.\n   * @param {User} user - The user object\n   */\n  recoverUsername: (user: User) =>\n    apiFetcher(`/RecoverUsername`, {\n      apiUrl,\n      body: user,\n      method: 'POST',\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Gets the details of a Tenant object.\n   * @param tenantName - The name of the tenant\n   */\n  getTenantConfig: (tenantName: string) =>\n    apiFetcher(`/Tenant/${tenantName}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        tenant: Tenant;\n      }\n    >,\n\n  /**\n   * Re-sends the verification code to confirm a pending User registration.\n   * @param {User} user - The user object\n   */\n  resendVerificationCode: (user: Partial<User>) =>\n    apiFetcher(`/ResendVerificationCode`, {\n      apiUrl,\n      body: user,\n      method: 'POST',\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Registers a new user.\n   * @param {User} user - The user object\n   */\n  createUser: (authToken: string, user: Partial<User>) =>\n    apiFetcher(`/User/${authToken}`, {\n      apiUrl,\n      body: user,\n      method: 'POST',\n    }) as Promise<ResponseSpec & { user: User }>,\n});\n","import { ResponseSpec, Integration } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\nexport default (apiUrl: string) => ({\n  /**\n   * Gets a list of integration objects for a specified Memori object.\n   * @param memoriID - The id of the Memori object\n   * @param authToken - The login token\n   * @returns A list of Integration objects\n   */\n  getMemoriIntegrationsList: (authToken: string, memoriID: string) =>\n    apiFetcher(`/Integrations/${authToken}/${memoriID}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        integrations: Integration[];\n      }\n    >,\n\n  /**\n   * Gets a list of integration objects.\n   * @param authToken - The login token\n   * @returns A list of Integration objects\n   */\n  getAllIntegrationsList: (authToken: string) =>\n    apiFetcher(`/AllIntegrations/${authToken}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        integrations: Integration[];\n      }\n    >,\n\n  /**\n   * Gets the detail of an integration object of the currently logged in User.\n   * @param authToken - The login token\n   * @param integrationID - The ID of the integration object\n   * @returns The Integration object\n   */\n  getIntegration: (authToken: string, integrationID: string) =>\n    apiFetcher(`/Integration/${authToken}/${integrationID}`, {\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        integration: Integration;\n      }\n    >,\n\n  /**\n   * Delete an exsisting integration object.\n   * @param authToken - The login token\n   * @param integrationID - The ID of the integration object\n   */\n  deleteIntegration: (authToken: string, integrationID: string) =>\n    apiFetcher(`/Integration/${authToken}/${integrationID}`, {\n      apiUrl,\n      method: 'DELETE',\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Register a new integration object.\n   * @param authToken - The login token\n   * @param integration - The Integration object\n   * @returns The Integration object\n   */\n  createIntegration: (authToken: string, integration: Integration) =>\n    apiFetcher(`/Integration/${authToken}`, {\n      apiUrl,\n      method: 'POST',\n      body: integration,\n    }) as Promise<\n      ResponseSpec & {\n        integration: Integration;\n      }\n    >,\n\n  /**\n   * Updates the integration object.\n   * @param authToken - The login token\n   * @param integrationID - The id of the Integration object\n   * @param integration - The Integration object\n   * @returns The Integration object\n   */\n  updateIntegration: (\n    authToken: string,\n    integrationID: string,\n    integration: Integration\n  ) =>\n    apiFetcher(`/Integration/${authToken}/${integrationID}`, {\n      apiUrl,\n      method: 'PATCH',\n      body: integration,\n    }) as Promise<\n      ResponseSpec & {\n        integration: Integration;\n      }\n    >,\n});\n","import { ResponseSpec, Asset } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\nexport default (apiUrl: string) => ({\n  /**\n   * URL to upload a file creating a new Asset object to access it.\n   * @param {string} authToken - The login token\n   * @param {string} memoriID - The memori ID\n   * @param {string=} memoryID - The memory ID\n   * @returns The URL to upload a file\n   */\n  getUploadAssetURL: (authToken: string, memoriID: string, memoryID?: string) =>\n    `${apiUrl}/Asset/${authToken}/${memoriID}${memoryID ? `/${memoryID}` : ''}`,\n\n  /**\n   * Uploads a file and creates a new Asset object to access it.\n   * @param {string} authToken - The login token\n   * @param {string} memoriID - The memori ID\n   * @param {string=} memoryID - The memory ID\n   * @returns Response of an Upload Asset request.\n   */\n  uploadAsset: async (\n    fileName: string,\n    fileUrl: string,\n    authToken: string,\n    memoriID: string,\n    memoryID?: string\n  ) => {\n    const data = new FormData();\n    const file = await fetch(fileUrl);\n    const fileBlob = await file.blob();\n\n    data.append(fileName, fileBlob, fileName);\n\n    const upload = await fetch(\n      `${apiUrl}/Asset/${authToken}/${memoriID}${\n        memoryID ? `/${memoryID}` : ''\n      }`,\n      {\n        method: 'POST',\n        body: data,\n      }\n    );\n    return (await upload.json()) as Promise<\n      ResponseSpec & {\n        asset: Asset;\n      }\n    >;\n  },\n\n  /**\n   * Downloads a file from an Asset object\n   * @param {string} fileName - The file name\n   * @param {string} sessionID - The session ID\n   * @returns The asset file\n   */\n  getAsset: (fileName: string, sessionID: string) =>\n    apiFetcher(`/Asset/${fileName}/${sessionID}`, {\n      apiUrl,\n      method: 'GET',\n    }),\n\n  /**\n   * Updates an Asset object\n   * @param {string} authToken - The login token\n   * @param {string} assetURL - The asset URL\n   * @returns The updated asset object\n   */\n  updateAsset: (authToken: string, assetURL: string, asset: Asset) =>\n    apiFetcher(`/Asset/${authToken}/${assetURL.split('/').reverse()[0]}`, {\n      apiUrl,\n      method: 'PATCH',\n      body: asset,\n    }) as Promise<ResponseSpec & { asset: Asset }>,\n\n  /**\n   * Deletes an Asset object\n   * @param {string} authToken - The login token\n   * @param {string} assetURL - The asset URL\n   */\n  deleteAsset: (authToken: string, assetURL: string) =>\n    apiFetcher(`/Asset/${authToken}/${assetURL.split('/').reverse()[0]}`, {\n      apiUrl,\n      method: 'DELETE',\n    }) as Promise<ResponseSpec>,\n});\n","import { ResponseSpec, Invitation } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\nexport default (apiUrl: string) => ({\n  /**\n   * Gets a list of invitations sent by the currently logged in User.\n   * @param {string} authToken - The login token\n   * @returns The list of Invitation objects.\n   */\n  getSentInvitations: (authToken: string) =>\n    apiFetcher(`/SentInvitations/${authToken}`, {\n      apiUrl,\n    }) as Promise<ResponseSpec & { invitations: Invitation[] }>,\n\n  /**\n   * Gets a list of invitations received by the currently logged in User.\n   * @param {string} authToken - The login token\n   * @returns The list of Invitation objects.\n   */\n  getReceivedInvitations: (authToken: string) =>\n    apiFetcher(`/ReceivedInvitations/${authToken}`, {\n      apiUrl,\n    }) as Promise<ResponseSpec & { invitations: Invitation[] }>,\n\n  /**\n   * Gets a list of all invitation objects\n   * @param {string} authToken - The login token\n   * @returns The list of Invitation objects.\n   */\n  getAllInvitations: (authToken: string) =>\n    apiFetcher(`/AllInvitations/${authToken}`, {\n      apiUrl,\n    }) as Promise<ResponseSpec & { invitations: Invitation[] }>,\n\n  /**\n   * Gets the details of an Invitation object of the currently logged in User.\n   * @param {string} authToken - The login token\n   * @param {string} invitationId - The ID of the Invitation object\n   * @returns The Invitation object.\n   */\n  getInvitation: (authToken: string, invitationId: string) =>\n    apiFetcher(`/Invitation/${authToken}/${invitationId}`, {\n      apiUrl,\n    }) as Promise<ResponseSpec & { invitation: Invitation }>,\n\n  /**\n   * Updates an existing Invitation object sent by the currently logged in User.\n   * @param {string} authToken - The login token\n   * @param {Invitation} invitation - The Invitation object\n   * @returns The Invitation object.\n   */\n  updateInvitation: (\n    authToken: string,\n    invitation: Partial<Omit<Invitation, 'invitationID'>> & {\n      invitationID: string;\n    }\n  ) =>\n    apiFetcher(`/Invitation/${authToken}/${invitation.invitationID}`, {\n      apiUrl,\n      method: 'PATCH',\n      body: invitation,\n    }) as Promise<ResponseSpec & { invitation: Invitation }>,\n\n  /**\n   * Deletes an existing Invitation object.\n   * @param {string} authToken - The login token\n   * @param {string} invitationId - The ID of the Invitation object\n   * @returns The Invitation object.\n   */\n  deleteInvitation: (authToken: string, invitationId: string) =>\n    apiFetcher(`/Invitation/${authToken}/${invitationId}`, {\n      apiUrl,\n      method: 'DELETE',\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Accepts an Invitation object.\n   * @param {string} authToken - The login token\n   * @param {string} invitationId - The ID of the Invitation object\n   * @returns The Invitation object.\n   */\n  acceptInvitation: (authToken: string, invitationId: string) =>\n    apiFetcher(`/AcceptInvitation/${authToken}/${invitationId}`, {\n      apiUrl,\n      method: 'POST',\n    }) as Promise<ResponseSpec & { invitation: Invitation }>,\n\n  /**\n   * Rejects an Invitation object.\n   * @param {string} authToken - The login token\n   * @param {string} invitationId - The ID of the Invitation object\n   * @returns The Invitation object.\n   */\n  rejectInvitation: (authToken: string, invitationId: string) =>\n    apiFetcher(`/RejectInvitation/${authToken}/${invitationId}`, {\n      apiUrl,\n      method: 'POST',\n    }) as Promise<ResponseSpec & { invitation: Invitation }>,\n\n  /**\n   * Send a new Invitation object\n   * @param {string} authToken - The login token\n   * @param {Invitation} invitation - The Invitation object\n   * @returns The Invitation object.\n   */\n  sendInvitation: (\n    authToken: string,\n    invitation: Partial<Omit<Invitation, 'invitationID'>>\n  ) =>\n    apiFetcher(`/SendInvitation/${authToken}`, {\n      apiUrl,\n      method: 'POST',\n      body: invitation,\n    }) as Promise<ResponseSpec & { invitation: Invitation }>,\n});\n","import memori from './backend/memori';\nimport user from './backend/user';\nimport integration from './backend/integration';\nimport asset from './backend/asset';\nimport invitation from './backend/invitation';\n\nconst backendAPI = (apiUrl: string) => ({\n  asset: asset(apiUrl),\n  memori: memori(apiUrl),\n  user: user(apiUrl),\n  integration: integration(apiUrl),\n  invitation: invitation(apiUrl),\n  ...asset(apiUrl),\n  ...memori(apiUrl),\n  ...user(apiUrl),\n  ...integration(apiUrl),\n  ...invitation(apiUrl),\n});\n\nexport default backendAPI;\n","import { ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/****************************\n *                          *\n *     CorrelationPairs     *\n *                          *\n ****************************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Lists all Correlation Pair objects.\n   * @param {string} sessionId The session ID\n   */\n  getCorrelationPairs: async (sessionId: string) =>\n    apiFetcher(`/CorrelationPairs/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Removes an existing Correlation Pair object.\n   * @param {string} sessionId The session ID\n   * @param {string} pairId The Correlation Pair object ID\n   */\n  deleteCorrelationPair: async (sessionId: string, pairId: string) =>\n    apiFetcher(`/CorrelationPair/${sessionId}/${pairId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import { DialogState, Medium, ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/******************\n *                *\n *     Dialog     *\n *                *\n ******************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Submits a Text Entered event to the session's Dialog State Machine.\n   * @param {object} params\n   * @param {string} params.sessionId The session ID\n   * @param {string} params.text The text entered by the user\n   */\n  postTextEnteredEvent: async ({\n    sessionId,\n    text,\n  }: {\n    sessionId: string;\n    text: string;\n  }) =>\n    apiFetcher(`/TextEnteredEvent/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n      body: {\n        text,\n      },\n    }) as Promise<\n      ResponseSpec & {\n        currentState: DialogState;\n      }\n    >,\n\n  /**\n   * Submits a Place Changed event to the session's Dialog State Machine.\n   * @param {object} params\n   * @param {string} params.sessionId - The session ID\n   * @param {string} params.placeName - The name of the place\n   * @param {number} params.latitude - The latitude of the place\n   * @param {number} params.longitude - The longitude of the place\n   * @param {number} params.uncertaintyKm - The uncertainty of the place in kilometers\n   */\n  postPlaceChangedEvent: async ({\n    sessionId,\n    placeName,\n    latitude,\n    longitude,\n    uncertaintyKm,\n  }: {\n    sessionId: string;\n    placeName: string;\n    latitude: number;\n    longitude: number;\n    uncertaintyKm?: number;\n  }) =>\n    apiFetcher(`/PlaceChangedEvent/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n      body: {\n        placeName,\n        latitude,\n        longitude,\n        uncertaintyKm,\n      },\n    }) as Promise<\n      ResponseSpec & {\n        currentState: DialogState;\n      }\n    >,\n\n  /**\n   * Submits a Date Changed event to the session's Dialog State Machine.\n   * @param {string} sessionId The session ID\n   */\n  postDateChangedEvent: async (sessionId: string) =>\n    apiFetcher(`/DateChangedEvent/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Submits a Tag Changed event to the session's Dialog State Machine.\n   * @param {string} sessionId The session ID\n   * @param {string} tag The tag to set\n   */\n  postTagChangedEvent: async (sessionId: string, tag: string) =>\n    apiFetcher(`/TagChangedEvent/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n      body: { tag },\n    }) as Promise<\n      ResponseSpec & {\n        currentState: DialogState;\n      }\n    >,\n\n  /**\n   * Submits a Timeout event to the session's Dialog State Machine.\n   * @param {string} sessionId The session ID\n   */\n  postTimeoutEvent: async (sessionId: string) =>\n    apiFetcher(`/TimeoutEvent/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        currentState: DialogState;\n      }\n    >,\n\n  /**\n   * Submits a Medium Selected event to the session's Dialog State Machine.\n   * @param {string} sessionId The session ID\n   * @param {Medium} medium The medium to set\n   */\n  postMediumSelectedEvent: async (sessionId: string, medium: Medium) =>\n    apiFetcher(`/MediumSelectedEvent/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n      body: { medium },\n    }) as Promise<\n      ResponseSpec & {\n        currentState: DialogState;\n      }\n    >,\n\n  /**\n   * Submits a Date Selected event to the session's Dialog State Machine.\n   * @param {string} sessionId The session ID\n   */\n  postDateSelectedEvent: async ({ sessionId }: { sessionId: string }) =>\n    apiFetcher(`/DateSelectedEvent/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Submits a Place Selected event to the session's Dialog State Machine.\n   * @param {string} sessionId The session ID\n   */\n  postPlaceSelectedEvent: async ({ sessionId }: { sessionId: string }) =>\n    apiFetcher(`/PlaceSelectedEvent/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Submits a Tag Selected event to the session's Dialog State Machine.\n   * @param {string} sessionId The session ID\n   */\n  postTagSelectedEvent: async ({ sessionId }: { sessionId: string }) =>\n    apiFetcher(`/TagSelectedEvent/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import { ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\nexport interface ImportExportBody {\n  csvRows: string[];\n  questionColumnName: string;\n  answerColumnName: string;\n  propertyColumnNames: string[];\n  includedRows: number[];\n  csvSeparator: string;\n  questionTitleVariantsSeparator: string;\n  hasHeaders: boolean;\n  forceImport: boolean;\n  headerNames: string[];\n}\n\nexport interface ImportExportReponse {\n  importID: string;\n  importedMemories: number;\n  importWarnings?: {\n    warningType: string;\n  }[];\n}\n\n/************************\n *                      *\n *     ImportExport     *\n *                      *\n ************************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Imports memories from a CSV file.\n   * @param {string} sessionId The session ID\n   * @param {ImportExportBody} csvData The CSV content info to import\n   */\n  postImportExport: async (sessionId: string, csvData: ImportExportBody) =>\n    apiFetcher(`/ImportExport/ImportCSV/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n      body: csvData,\n    }) as Promise<ResponseSpec & ImportExportReponse>,\n});\n","import { ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/*******************\n *                 *\n *     Intents     *\n *                 *\n *******************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Lists all Intent objects.\n   * @param {string} sessionId The session ID\n   */\n  getIntents: async (sessionId: string) =>\n    apiFetcher(`/Intents/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Gets the details of an Intent object.\n   * @param {string} sessionId The session ID\n   * @param {string} intentId The Intent object ID\n   */\n  getIntent: async (sessionId: string, intentId: string) =>\n    apiFetcher(`/Intent/${sessionId}/${intentId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Updates an existing Intent object.\n   * @param {string} sessionId The session ID\n   * @param {string} intentId The Intent object ID\n   */\n  patchIntent: async (sessionId: string, intentId: string) =>\n    apiFetcher(`/Intent/${sessionId}/${intentId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Removes an existing Intent object.\n   * @param {string} sessionId The session ID\n   * @param {string} intentId The Intent object ID\n   */\n  deleteIntent: async (sessionId: string, intentId: string) =>\n    apiFetcher(`/Intent/${sessionId}/${intentId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Adds a new Intent object.\n   * @param {string} sessionId The session ID\n   */\n  postIntent: async (sessionId: string) =>\n    apiFetcher(`/Intent/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Lists all Intent Slot objects.\n   * @param {string} sessionId The session ID\n   */\n  getIntentSlots: async (sessionId: string) =>\n    apiFetcher(`/IntentSlots/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Gets the details of an Intent Slot object.\n   * @param {string} sessionId The session ID\n   * @param {string} slotId The Intent Slot object ID\n   */\n  getIntentSlot: async (sessionId: string, slotId: string) =>\n    apiFetcher(`/IntentSlot/${sessionId}/${slotId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Updates an existing Intent Slot object.\n   * @param {string} sessionId The session ID\n   * @param {string} slotId The Intent Slot object ID\n   */\n  patchIntentSlot: async (sessionId: string, slotId: string) =>\n    apiFetcher(`/IntentSlot/${sessionId}/${slotId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Removes an existing Intent Slot object.\n   * @param {string} sessionId The session ID\n   * @param {string} slotId The Intent Slot object ID\n   */\n  deleteIntentSlot: async (sessionId: string, slotId: string) =>\n    apiFetcher(`/IntentSlot/${sessionId}/${slotId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Adds a new Intent Slot object.\n   * @param {string} sessionId The session ID\n   */\n  postIntentSlot: async (sessionId: string) =>\n    apiFetcher(`/IntentSlot/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import {\n  ResponseSpec,\n  LocalizationKey,\n  LocalizationKeyContent,\n} from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/****************************\n *                          *\n *     LocalizationKeys     *\n *                          *\n ****************************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Lists all Localizaiton Keys.\n   * @param {string} sessionId The session ID\n   */\n  getLocalizationKeys: async (sessionId: string) =>\n    apiFetcher(`/LocalizationKeys/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        localizationKeys: LocalizationKey[];\n      }\n    >,\n\n  /**\n   * Get an existing Localizaiton Key.\n   * @param {string} sessionId The session ID\n   * @param {string} key The key of the Localization Key\n   */\n  getLocalizationKey: async (sessionId: string, key: string) =>\n    apiFetcher(`/LocalizationKey/${sessionId}/${key}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        localizationKey: LocalizationKey;\n      }\n    >,\n\n  /**\n   * Removes an existing Localizaiton Key. This is only possible if the key is part of\n   *  a key set, where a key set is a set of keys of a common prefix and an index,\n   *  e.g.: <code>INPUT_QUIT_1</code>, <code>INPUT_QUIT_2</code> etc.\n   *  Any index can be specified, the key set will be reordered appropriately.\n   * @param {string} sessionId The session ID\n   * @param {string} key The key of the Localization Key\n   */\n  deleteLocalizationKey: async (sessionId: string, key: string) =>\n    apiFetcher(`/LocalizationKey/${sessionId}/${key}`, {\n      method: 'DELETE',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Add an new Localization Key. This is only possible if the key is part of\n   *  a key set, where a key set is a set of keys of a common prefix and an index,\n   *  e.g.: <code>INPUT_QUIT_1</code>, <code>INPUT_QUIT_2</code> etc.\n   *  Any index can be specified, the key set will be reordered appropriately.\n   * @param {string} sessionId The session ID\n   * @param {LocalizaitonKeyContent} localizationKey Localization Key\n   */\n  postLocalizationKey: async (\n    sessionId: string,\n    localizationKey: LocalizationKeyContent\n  ) =>\n    apiFetcher(`/LocalizationKey/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n      body: localizationKey,\n    }) as Promise<\n      ResponseSpec & {\n        localizationKey: LocalizationKey;\n      }\n    >,\n\n  /**\n   * Updates an existing Localization Key.\n   * @param {string} sessionId The session ID\n   * @param {LocalizationKey} localizationKey Localization Key\n   */\n  patchLocalizationKey: async (\n    sessionId: string,\n    localizationKey: LocalizationKey\n  ) =>\n    apiFetcher(`/LocalizationKey/${sessionId}`, {\n      method: 'PATCH',\n      apiUrl,\n      body: localizationKey,\n    }) as Promise<ResponseSpec>,\n});\n","import { ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/*****************\n *               *\n *     Media     *\n *               *\n *****************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Lists all Medium objects of a Memory.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   */\n  getMedia: async (sessionId: string, memoryId: string) =>\n    apiFetcher(`/Media/${sessionId}/${memoryId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Removes all Medium objects from a Memory.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   */\n  deleteMedia: async (sessionId: string, memoryId: string) =>\n    apiFetcher(`/Media/${sessionId}/${memoryId}`, {\n      method: 'DELETE',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Gets the details of a Medium object of a Memory.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   * @param {string} mediumId The Medium object ID\n   */\n  getMedium: async (sessionId: string, memoryId: string, mediumId: string) =>\n    apiFetcher(`/Medium/${sessionId}/${memoryId}/${mediumId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Updates an existing Medium object of a Memory.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   * @param {string} mediumId The Medium object ID\n   */\n  patchMedium: async (sessionId: string, memoryId: string, mediumId: string) =>\n    apiFetcher(`/Medium/${sessionId}/${memoryId}/${mediumId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Removes an existing Medium object from a Memory.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   * @param {string} mediumId The Medium object ID\n   */\n  deleteMedium: (sessionId: string, memoryId: string, mediumId: string) =>\n    apiFetcher(`/Medium/${sessionId}/${memoryId}/${mediumId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Adds a new Medium object to a Memory.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   */\n  postMedium: async (sessionId: string, memoryId: string) =>\n    apiFetcher(`/Medium/${sessionId}/${memoryId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import { Memory, ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/********************\n *                  *\n *     Memories     *\n *                  *\n ********************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Lists all Memory objects.\n   * @param {string} sessionId The session ID\n   */\n  getMemories: async (sessionId: string) =>\n    apiFetcher(`/Memories/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memories: Memory[];\n      }\n    >,\n\n  /**\n   * Gets the details of a Memory object.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   */\n  getMemory: async (sessionId: string, memoryId: string) =>\n    apiFetcher(`/Memory/${sessionId}/${memoryId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        memory: Memory;\n      }\n    >,\n\n  /**\n   * Updates an existing Memory object.\n   * @param {string} sessionId The session ID\n   * @param {Memory} memory The Memory object\n   */\n  patchMemory: async (sessionId: string, memory: Memory) =>\n    apiFetcher(`/Memory/${sessionId}/${memory.memoryID}`, {\n      method: 'PATCH',\n      apiUrl,\n      body: memory,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Removes an existing Memory object.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   */\n  deleteMemory: async (sessionId: string, memoryId: string) =>\n    apiFetcher(`/Memory/${sessionId}/${memoryId}`, {\n      method: 'DELETE',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Adds a new Memory object.\n   * @param {string} sessionId The session ID\n   * @param {Memory} memory The Memory object\n   */\n  postMemory: async (sessionId: string, memory: Memory) =>\n    apiFetcher(`/Memory/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n      body: memory,\n    }) as Promise<\n      ResponseSpec & {\n        memoryID: string;\n      }\n    >,\n\n  /**\n   * Checks if a Memory object is accessible from the specified session.\n   * @param {string} sessionId The session ID\n   * @param {string} memoryId The Memory object ID\n   */\n  getMemoryAccess: async (sessionId: string, memoryId: string) =>\n    apiFetcher(`/MemoryAccess/${sessionId}/${memoryId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import { ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/***************\n *             *\n *     NLP     *\n *             *\n ***************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Looks up the vector definition for a word.\n   * @param {string} sessionId The session ID\n   * @param {string} word Word to be looked up\n   */\n  getWordVector: async (sessionId: string, word: string) =>\n    apiFetcher(`/WordVector/${sessionId}/${word}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Tries to guess the language of a sentence by analyzing key word occurrences.\n   * @param {string} sessionId The session ID\n   * @param {string} text Text to be used for guessing the language.\n   */\n  guessLanguage: async (sessionId: string, text: string) =>\n    apiFetcher(`/GuessLanguage/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n      body: { text },\n    }) as Promise<\n      ResponseSpec & {\n        languageGuesses: {\n          [lang: string]: number;\n        };\n      }\n    >,\n});\n","import { ResponseSpec, Person } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/******************\n *                *\n *     People     *\n *                *\n ******************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Lists all Person objects.\n   * @param {string} sessionId The session ID\n   */\n  getPeople: async (sessionId: string) =>\n    apiFetcher(`/People/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        people: Person[];\n      }\n    >,\n\n  /**\n   * Gets the details of a Person object.\n   * @param {string} sessionId The session ID\n   * @param {string} personId The Person object ID\n   */\n  getPerson: async (sessionId: string, personId: string) =>\n    apiFetcher(`/Person/${sessionId}/${personId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        person: Person;\n      }\n    >,\n\n  /**\n   * Updates an existing Person object.\n   * @param {string} sessionId The session ID\n   * @param {Person} person The Person object\n   */\n  patchPerson: async (sessionId: string, person: Person) =>\n    apiFetcher(`/Person/${sessionId}/${person.personID!}`, {\n      method: 'PATCH',\n      body: person,\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        person: Person;\n      }\n    >,\n\n  /**\n   * Removes an existing Person object.\n   * @param {string} sessionId The session ID\n   * @param {string} personId The Person object ID\n   */\n  deletePerson: async (sessionId: string, personId: string) =>\n    apiFetcher(`/Person/${sessionId}/${personId}`, {\n      method: 'DELETE',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Adds a new Person object.\n   * @param {string} sessionId - The session ID\n   * @param {Person} person - The Person object\n   */\n  postPerson: async (sessionId: string, person: Person) =>\n    apiFetcher(`/Person/${sessionId}`, {\n      method: 'POST',\n      body: person,\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        person: Person;\n      }\n    >,\n});\n","import { ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/*****************************\n *                           *\n *     PromptedQuestions     *\n *                           *\n *****************************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Lists all Prompted Question objects.\n   * @param {string} sessionId The session ID\n   */\n  getPromptedQuestions: async (sessionId: string) =>\n    apiFetcher(`/PromptedQuestions/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Gets the details of a Prompted Question object.\n   * @param {string} sessionId The session ID\n   * @param {string} promptId The Prompted Question object ID\n   */\n  getPromptedQuestion: async (sessionId: string, promptId: string) =>\n    apiFetcher(`/PromptedQuestion/${sessionId}/${promptId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Updates an existing Prompted Question object.\n   * @param {string} sessionId The session ID\n   * @param {string} promptId The Prompted Question object ID\n   */\n  patchPromptedQuestion: async (sessionId: string, promptId: string) =>\n    apiFetcher(`/PromptedQuestion/${sessionId}/${promptId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Removes an existing Prompted Question object.\n   * @param {string} sessionId The session ID\n   * @param {string} promptId The Prompted Question object ID\n   */\n  deletePromptedQuestion: async (sessionId: string, promptId: string) =>\n    apiFetcher(`/PromptedQuestion/${sessionId}/${promptId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Adds a new Prompted Question object.\n   * @param {string} sessionId The session ID\n   */\n  postPromptedQuestion: async (sessionId: string) =>\n    apiFetcher(`/PromptedQuestion/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import { ResponseSpec, SearchQuery, SearchMatches } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/******************\n *                *\n *     Search     *\n *                *\n ******************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Searches for matching Memory objects using the same algorithm employed in the Text Entered event of the R1 state of the Dialog State Machine.\n   * @param {string} sessionId The session ID\n   * @param {SearchQuery} query Search query params\n   */\n  searchMemory: async (sessionId: string, query?: SearchQuery) =>\n    apiFetcher(`/Search/${sessionId}`, {\n      method: 'POST',\n      body: query,\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        matches: SearchMatches[];\n      }\n    >,\n\n  /**\n   * Picks up to 5 random Memory objects using the same algorithm employed in the\n   * Timeout event of the R1 state of the Dialog State Machine.\n   * @param {string} sessionId The session ID\n   */\n  postRandom: async (sessionId: string) =>\n    apiFetcher(`/Random/${sessionId}`, {\n      method: 'POST',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n\n  /**\n   * Picks up to 20 Memory Hint objects, obtained by searching for Story objects with a date or place set,\n   * and clustering dates and places within an uncertainty of at least 1 year or at least 100 km.\n   * Each Memory Hint may either suggest a date or a place, but not both.\n   * @param {string} sessionId The session ID\n   */\n  postHints: async (sessionId: string) =>\n    apiFetcher(`/Hints/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import { ResponseSpec, OpenSession, DialogState } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/*******************\n *                 *\n *     Session     *\n *                 *\n *******************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Initializes a new Dialog State Machine session for an existing Memori.\n   */\n  initSession: async (params: OpenSession) =>\n    apiFetcher(`/Session`, {\n      method: 'POST',\n      body: params,\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        sessionID: string;\n        currentState: DialogState;\n      }\n    >,\n\n  /**\n   * Returns the current state of a session's Dialog State Machine.\n   * @param {string} sessionId The session ID\n   */\n  getSession: async (sessionId: string) =>\n    apiFetcher(`/Session/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        currentState: DialogState;\n      }\n    >,\n\n  /**\n   * Closes the session and disposes of its Dialog State Machine.\n   * @param {string} sessionId The session ID\n   */\n  deleteSession: async (sessionId: string) =>\n    apiFetcher(`/Session/${sessionId}`, {\n      method: 'DELETE',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import { ResponseSpec, Stats, EventLog } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/*****************\n *               *\n *     Stats     *\n *               *\n *****************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Computes usage statistics for the Memori of the current session.\n   * @param {string} sessionId The session ID\n   */\n  getStatistics: async (sessionId: string) =>\n    apiFetcher(`/Statistics/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        statistics: Stats;\n      }\n    >,\n\n  /**\n   * Get the Event Log objects for the Memori of the current session in a specific date interval\n   * @param {string} sessionId The session ID\n   * @param {string} strDateFrom The optional begin of the date interval, in UTC time, in the format yyyyMMddHHmmssfff\n   * @param {string} strDateTo The optional end of the date interval, in UTC time, in the format yyyyMMddHHmmssfff\n   */\n  getEventLogs: async (\n    sessionId: string,\n    strDateFrom: string,\n    strDateTo: string\n  ) =>\n    apiFetcher(`/EventLogs/${sessionId}/${strDateFrom}/${strDateTo}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        eventLogs: EventLog[];\n      }\n    >,\n});\n","import { ResponseSpec, UnansweredQuestion } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/*******************************\n *                             *\n *     UnansweredQuestions     *\n *                             *\n *******************************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Lists all Unanswered Question objects.\n   * @param {string} sessionId The session ID\n   */\n  getUnansweredQuestions: async (sessionId: string) =>\n    apiFetcher(`/UnansweredQuestions/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        unansweredQuestions: UnansweredQuestion[];\n      }\n    >,\n\n  /**\n   * Removes an existing Unanswered Question object.\n   * @param {string} sessionId The session ID\n   * @param {string} unansweredQuestionId The Unanswered Question object ID\n   */\n  deleteUnansweredQuestion: async (\n    sessionId: string,\n    unansweredQuestionId: string\n  ) =>\n    apiFetcher(`/UnansweredQuestion/${sessionId}/${unansweredQuestionId}`, {\n      method: 'DELETE',\n      apiUrl,\n    }) as Promise<ResponseSpec>,\n});\n","import { ResponseSpec } from '../types';\nimport { apiFetcher } from '../apiFetcher';\n\n/****************************\n *                          *\n *       ContextVars        *\n *                          *\n ****************************/\n\nexport default (apiUrl: string) => ({\n  /**\n   * Gets a list of currently known context variables.\n   * @param {string} sessionId The session ID\n   */\n  getContextVars: async (sessionId: string) =>\n    apiFetcher(`/ContextVars/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        [variable: string]: string[];\n      }\n    >,\n\n  /**\n   * Gets a list of currently known context variable names.\n   * @param {string} sessionId The session ID\n   */\n  getContextVarNames: async (sessionId: string) =>\n    apiFetcher(`/ContextVarNames/${sessionId}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        contextVarNames: string[];\n      }\n    >,\n\n  /**\n   * /memori/v2/ContextVarValues/{strSessionID}/{contextVarName}\n   * @param {string} sessionId The session ID\n   * @param {string} contextVarName The name of the context variable\n   */\n  getContextVarValues: async (sessionId: string, contextVarName: string) =>\n    apiFetcher(`/ContextVarValues/${sessionId}/${contextVarName}`, {\n      method: 'GET',\n      apiUrl,\n    }) as Promise<\n      ResponseSpec & {\n        contextVarName: string;\n        contextVarValues: string[];\n      }\n    >,\n});\n","export const allowedMediaTypes = [\n  'image/jpeg',\n  'image/png',\n  'image/jpg',\n  'image/gif',\n  'text/plain',\n  'application/msword',\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'application/vnd.ms-excel',\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  'application/pdf',\n  'video/mp4',\n  'video/avi',\n  'audio/mpeg3',\n  'audio/wav',\n  'audio/mpeg',\n  'video/mpeg',\n  'model/gltf-binary',\n];\n\nexport const anonTag = '👤';\n","import * as speechSdk from 'microsoft-cognitiveservices-speech-sdk';\n\nconst getTTSVoice = (lang: string, voiceType: 'MALE' | 'FEMALE'): string => {\n  let voice = '';\n  let voiceLang = lang.toUpperCase();\n  switch (voiceLang) {\n    case 'IT':\n      voice = `${\n        voiceType === 'MALE' ? 'it-IT-DiegoNeural' : 'it-IT-ElsaNeural'\n      }`;\n      break;\n    case 'DE':\n      voice = `${\n        voiceType === 'MALE' ? 'de-DE-ConradNeural' : 'de-DE-KatjaNeural'\n      }`;\n      break;\n    case 'EN':\n      voice = `${\n        voiceType === 'MALE' ? 'en-GB-RyanNeural' : 'en-GB-SoniaNeural'\n      }`;\n      break;\n    case 'ES':\n      voice = `${\n        voiceType === 'MALE' ? 'es-ES-AlvaroNeural' : 'es-ES-ElviraNeural'\n      }`;\n      break;\n    case 'FR':\n      voice = `${\n        voiceType === 'MALE' ? 'fr-FR-HenriNeural' : 'fr-FR-DeniseNeural'\n      }`;\n      break;\n    case 'PT':\n      voice = `${\n        voiceType === 'MALE' ? 'pt-PT-DuarteNeural' : 'pt-PT-RaquelNeural'\n      }`;\n      break;\n    default:\n      voice = `${\n        voiceType === 'MALE' ? 'it-IT-DiegoNeural' : 'it-IT-IsabellaNeural'\n      }`;\n      break;\n  }\n  return voice;\n};\n\nconst getCultureCodeByLanguage = (lang: string): string => {\n  let voice = '';\n  let voiceLang = lang.toUpperCase();\n  switch (voiceLang) {\n    case 'IT':\n      voice = 'it-IT';\n      break;\n    case 'DE':\n      voice = 'de-DE';\n      break;\n    case 'EN':\n      voice = 'en-US';\n      break;\n    case 'ES':\n      voice = 'es-ES';\n      break;\n    case 'FR':\n      voice = 'fr-FR';\n      break;\n    case 'PT':\n      voice = 'pt-PT';\n      break;\n    default:\n      voice = 'it-IT';\n      break;\n  }\n  return voice;\n};\n\n/**\n * EXPERIMENTAL\n */\nconst speech = (AZURE_COGNITIVE_SERVICES_TTS_KEY: string, DEBUG = false) => (\n  lang: string,\n  voiceType: 'FEMALE' | 'MALE'\n) => {\n  let speechConfig: speechSdk.SpeechConfig = speechSdk.SpeechConfig.fromSubscription(\n    AZURE_COGNITIVE_SERVICES_TTS_KEY,\n    'eastus'\n  );\n  let speechSynthesizer: speechSdk.SpeechSynthesizer | null;\n  let audioDestination: speechSdk.SpeakerAudioDestination;\n\n  audioDestination = new speechSdk.SpeakerAudioDestination();\n  let audioOutputConfig = speechSdk.AudioConfig.fromSpeakerOutput(\n    audioDestination\n  );\n\n  // https://docs.microsoft.com/it-it/azure/cognitive-services/speech-service/language-support#text-to-speech\n  speechConfig.speechSynthesisVoiceName = getTTSVoice(lang, voiceType);\n\n  let langCultureCode = getCultureCodeByLanguage(lang);\n  speechConfig.speechSynthesisLanguage = langCultureCode;\n  speechConfig.speechRecognitionLanguage = langCultureCode;\n\n  /**\n   * speak\n   * @description Speaks the text using the speech synthesizer. (TTS)\n   * @param {string} text - The text to be synthesized.\n   * @param {func=} onAudioEnd - The callback to be invoked when the synthesized audio is finished.\n   */\n  const speak = (\n    text: string,\n    onAudioEnd?: (sender: speechSdk.IPlayer) => void\n  ) => {\n    stopSpeaking();\n\n    speechSynthesizer = new speechSdk.SpeechSynthesizer(\n      speechConfig,\n      audioOutputConfig\n    );\n\n    if (onAudioEnd) audioDestination.onAudioEnd = onAudioEnd;\n\n    speechSynthesizer.speakTextAsync(\n      text,\n      result => {\n        if (result) {\n          try {\n            if (DEBUG) console.log('speak result', result);\n            if (speechSynthesizer) {\n              speechSynthesizer.close();\n              speechSynthesizer = null;\n            }\n          } catch (e) {\n            console.error('speak error: ', e);\n            window.speechSynthesis.speak(new SpeechSynthesisUtterance(text));\n          }\n        } else if (DEBUG) {\n          console.log('speak no result', result);\n        }\n      },\n      error => {\n        console.error('speak:', error);\n        window.speechSynthesis.speak(new SpeechSynthesisUtterance(text));\n      }\n    );\n  };\n\n  /**\n   * isSpeaking\n   * @description Returns true if the synthesizer is speaking.\n   * @returns {boolean}\n   */\n  const isSpeaking = (): boolean => {\n    return !!speechSynthesizer;\n  };\n\n  /**\n   * stopSpeaking\n   * @description Stops the speech synthesizer if it is synthesizing.\n   */\n  const stopSpeaking = () => {\n    if (audioDestination) audioDestination.pause();\n    if (speechSynthesizer) {\n      speechSynthesizer.close();\n      speechSynthesizer = null;\n    }\n  };\n\n  const audioInputConfig = speechSdk.AudioConfig.fromDefaultMicrophoneInput();\n  let recognizer: speechSdk.SpeechRecognizer | null;\n\n  /**\n   * recognize\n   * @description Starts the speech recognition.\n   * @param {func=} onRecognized - Callback method invoked when the speech is recognized with the text.\n   */\n  const recognize = (onRecognized: (transcript: string) => void) => {\n    recognizer = new speechSdk.SpeechRecognizer(speechConfig, audioInputConfig);\n\n    recognizer.recognizing = (_s, e) => {\n      if (DEBUG) console.log(`RECOGNIZING: Text=${e.result.text}`);\n    };\n    recognizer.recognized = (_s, e) => {\n      if (e.result.reason === speechSdk.ResultReason.RecognizedSpeech) {\n        if (DEBUG) console.log(`RECOGNIZED: Text=${e.result.text}`);\n        onRecognized(e.result.text ?? '');\n      } else if (e.result.reason === speechSdk.ResultReason.NoMatch && DEBUG) {\n        console.log('NOMATCH: Speech could not be recognized.');\n      }\n    };\n    recognizer.canceled = (_s, e) => {\n      if (DEBUG) console.log(`CANCELED: Reason=${e.reason}`);\n\n      if (e.reason === speechSdk.CancellationReason.Error && DEBUG) {\n        console.log(`\"CANCELED: ErrorCode=${e.errorCode}`);\n        console.log(`\"CANCELED: ErrorDetails=${e.errorDetails}`);\n        console.log(\n          'CANCELED: Did you set the speech resource key and region values?'\n        );\n      }\n\n      stopRecognizing();\n    };\n\n    recognizer.sessionStopped = (_s, _e) => {\n      if (DEBUG) console.log('\\n    Session stopped event.');\n      if (recognizer) recognizer.stopContinuousRecognitionAsync();\n    };\n    recognizer.startContinuousRecognitionAsync();\n  };\n\n  /**\n   * isRecognizing\n   * @description Returns true if the recognizer is recognizing.\n   * @returns {boolean}\n   */\n  const isRecognizing = (): boolean => {\n    return !!recognizer;\n  };\n\n  /**\n   * stopRecognizing\n   * @description Stops the speech recognizer if it is recognizing.\n   * @param {func=} onStop - (optional) The callback to be invoked when the speech recognition is stopped.\n   */\n  const stopRecognizing = (onStop?: () => void) => {\n    if (recognizer) {\n      recognizer.stopContinuousRecognitionAsync();\n      recognizer.close();\n      recognizer = null;\n\n      if (onStop) onStop();\n    }\n  };\n\n  return {\n    speak,\n    isSpeaking,\n    stopSpeaking,\n    recognize,\n    isRecognizing,\n    stopRecognizing,\n  };\n};\n\nexport default speech;\n","export interface ResourceURLParams {\n  type?: 'avatar' | 'cover' | 'default';\n  resourceURI?: string;\n  sessionID?: string;\n  baseURL?: string;\n}\n\nexport default (apiUrl: string) => ({\n  /**\n   * getResourceUrl\n   * @description Returns the correct URL of a resource from the DB.\n   * @param {obj} params\n   * @param {string=} params.type - wheather is the avatar or the cover\n   * @param {string=} params.resourceURI - the resource URI\n   * @param {string=} params.sessionID - the session ID, required for memory media attachments\n   * @param {string=} params.baseURL - the base URL for default static assets (defaults to https://app.twincreator.com)\n   * @returns {string}\n   */\n  getResourceUrl: ({\n    type,\n    resourceURI,\n    sessionID,\n    baseURL = 'https://app.twincreator.com',\n  }: ResourceURLParams): string => {\n    let defaultUri =\n      type === 'cover'\n        ? `${baseURL}/images/memoriCover.png`\n        : `${baseURL}/images/memoriAvatar.png`;\n    if (!resourceURI || resourceURI.length === 0) {\n      return defaultUri;\n    } else if (resourceURI.includes('memoriai/memory')) {\n      return `${resourceURI}?memori-ai-session-id=${sessionID}`;\n    } else if (\n      resourceURI.startsWith('https://') ||\n      resourceURI.startsWith('http://')\n    ) {\n      return `${resourceURI}${sessionID ? `/${sessionID}` : ''}`;\n    } else if (resourceURI.startsWith('cloud://')) {\n      return `${apiUrl.replace(/v2/, 'v1')}/CloudAsset/${resourceURI.replace(\n        'cloud://',\n        ''\n      )}`;\n    } else if (resourceURI.startsWith('guid://')) {\n      return `${apiUrl.replace(/v2/, 'v1')}/GuidAsset/${resourceURI.replace(\n        'guid://',\n        ''\n      )}`;\n    } else {\n      return defaultUri;\n    }\n  },\n});\n","import { getApiUrl } from './helpers/getApiUrl';\nimport backend from './backend';\nimport engine from './engine';\nimport * as constants from './constants';\nimport speech from './speech';\nimport asset from './helpers/asset';\n\nconst api = (hostname?: string) => {\n  const apiUrl = getApiUrl(hostname);\n\n  return {\n    backend: backend(`${apiUrl}/api/v2`),\n    ...engine(`${apiUrl}/memori/v2`),\n    speech,\n    constants,\n    asset: asset(`${apiUrl}/api/v2`),\n  };\n};\n\nexport default api;\n","import correlationPairs from './engine/correlationPairs';\nimport dialog from './engine/dialog';\nimport importExport from './engine/importExport';\nimport intents from './engine/intents';\nimport localizationKeys from './engine/localizationKeys';\nimport media from './engine/media';\nimport memories from './engine/memories';\nimport nlp from './engine/nlp';\nimport people from './engine/people';\nimport promptedQuestions from './engine/promptedQuestions';\nimport search from './engine/search';\nimport session from './engine/session';\nimport stats from './engine/stats';\nimport unansweredQuestions from './engine/unansweredQuestions';\nimport contextVars from './engine/contextVars';\n\nexport default (apiUrl: string) => ({\n  correlationPairs: correlationPairs(apiUrl),\n  ...correlationPairs(apiUrl),\n  dialog: dialog(apiUrl),\n  ...dialog(apiUrl),\n  importExport: importExport(apiUrl),\n  ...importExport(apiUrl),\n  intents: intents(apiUrl),\n  ...intents(apiUrl),\n  localizationKeys: localizationKeys(apiUrl),\n  ...localizationKeys(apiUrl),\n  media: media(apiUrl),\n  ...media(apiUrl),\n  memories: memories(apiUrl),\n  ...memories(apiUrl),\n  nlp: nlp(apiUrl),\n  ...nlp(apiUrl),\n  people: people(apiUrl),\n  ...people(apiUrl),\n  promptedQuestions: promptedQuestions(apiUrl),\n  ...promptedQuestions(apiUrl),\n  search: search(apiUrl),\n  ...search(apiUrl),\n  session: session(apiUrl),\n  ...session(apiUrl),\n  stats: stats(apiUrl),\n  ...stats(apiUrl),\n  unansweredQuestions: unansweredQuestions(apiUrl),\n  ...unansweredQuestions(apiUrl),\n  contextVars: contextVars(apiUrl),\n  ...contextVars(apiUrl),\n});\n"],"names":["apiFetcher","path","opts","fetch","apiUrl","body","JSON","stringify","undefined","mode","credentials","headers","Content-Type","then","res","json","getTenantPublicMemoriList","tenant","encodeURI","getPublicMemoriList","authToken","getAllMemori","getUserMemoriList","getSharedMemoriList","getTenantCategories","getMemoriConfigs","createMemori","memori","method","updateMemori","memoriID","deleteMemori","getMemoriById","getMemoriByUserAndId","tenantName","userID","getMemori","userName","memoriName","getMemoriSessions","dateFrom","dateTo","userSignIn","user","userConfirmSignIn","userLogin","userLogout","getUser","getUsersList","deleteUser","updateUser","resetPassword","resetConfirm","recoverUsername","getTenantConfig","resendVerificationCode","createUser","getMemoriIntegrationsList","getAllIntegrationsList","getIntegration","integrationID","deleteIntegration","createIntegration","integration","updateIntegration","getUploadAssetURL","memoryID","uploadAsset","fileName","fileUrl","data","FormData","_context","file","blob","append","upload","getAsset","sessionID","updateAsset","assetURL","asset","split","reverse","deleteAsset","getSentInvitations","getReceivedInvitations","getAllInvitations","getInvitation","invitationId","updateInvitation","invitation","invitationID","deleteInvitation","acceptInvitation","rejectInvitation","sendInvitation","backendAPI","getCorrelationPairs","sessionId","deleteCorrelationPair","pairId","postTextEnteredEvent","text","postPlaceChangedEvent","placeName","latitude","longitude","uncertaintyKm","postDateChangedEvent","postTagChangedEvent","tag","postTimeoutEvent","postMediumSelectedEvent","medium","postDateSelectedEvent","postPlaceSelectedEvent","postTagSelectedEvent","postImportExport","csvData","getIntents","getIntent","intentId","patchIntent","deleteIntent","postIntent","getIntentSlots","getIntentSlot","slotId","patchIntentSlot","deleteIntentSlot","postIntentSlot","getLocalizationKeys","getLocalizationKey","key","deleteLocalizationKey","postLocalizationKey","localizationKey","patchLocalizationKey","getMedia","memoryId","deleteMedia","getMedium","mediumId","patchMedium","deleteMedium","postMedium","getMemories","getMemory","patchMemory","memory","deleteMemory","postMemory","getMemoryAccess","getWordVector","word","guessLanguage","getPeople","getPerson","personId","patchPerson","person","personID","deletePerson","postPerson","getPromptedQuestions","getPromptedQuestion","promptId","patchPromptedQuestion","deletePromptedQuestion","postPromptedQuestion","searchMemory","query","postRandom","postHints","initSession","params","getSession","deleteSession","getStatistics","getEventLogs","strDateFrom","strDateTo","getUnansweredQuestions","deleteUnansweredQuestion","unansweredQuestionId","getContextVars","getContextVarNames","getContextVarValues","contextVarName","speech","AZURE_COGNITIVE_SERVICES_TTS_KEY","DEBUG","lang","voiceType","speechSynthesizer","audioDestination","speechConfig","speechSdk","fromSubscription","audioOutputConfig","fromSpeakerOutput","speechSynthesisVoiceName","voice","toUpperCase","getTTSVoice","langCultureCode","getCultureCodeByLanguage","speechSynthesisLanguage","speechRecognitionLanguage","recognizer","stopSpeaking","pause","close","audioInputConfig","fromDefaultMicrophoneInput","stopRecognizing","onStop","stopContinuousRecognitionAsync","speak","onAudioEnd","speakTextAsync","result","console","log","e","error","window","speechSynthesis","SpeechSynthesisUtterance","isSpeaking","recognize","onRecognized","recognizing","_s","recognized","reason","RecognizedSpeech","NoMatch","canceled","Error","errorCode","errorDetails","sessionStopped","_e","startContinuousRecognitionAsync","isRecognizing","getResourceUrl","resourceURI","baseURL","defaultUri","type","length","includes","startsWith","replace","hostname","URL","origin","getApiUrl","backend","correlationPairs","dialog","importExport","intents","localizationKeys","media","memories","nlp","people","promptedQuestions","search","session","stats","unansweredQuestions","contextVars","engine","constants"],"mappings":"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"}